// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Alphabet
#include <Alphabet.h>
#endif
#ifndef INCLUDED_CharacterSkinSubState
#include <CharacterSkinSubState.h>
#endif
#ifndef INCLUDED_ClientPrefs
#include <ClientPrefs.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_HealthIcon
#include <HealthIcon.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fb6bd34f3995f7f3_18_new,"CharacterSkinSubState","new",0xd1b29da9,"CharacterSkinSubState.new","CharacterSkinSubState.hx",18,0xc78a89e7)
static const ::String _hx_array_data_3c7e9537_1[] = {
	HX_("Resume",cd,dd,18,3d),HX_("Restart Song",06,b6,fe,13),HX_("Change Difficulty",eb,7e,37,a6),HX_("Exit to menu",82,87,9a,a9),
};
HX_LOCAL_STACK_FRAME(_hx_pos_fb6bd34f3995f7f3_63_update,"CharacterSkinSubState","update",0x15656c60,"CharacterSkinSubState.update","CharacterSkinSubState.hx",63,0xc78a89e7)
HX_LOCAL_STACK_FRAME(_hx_pos_fb6bd34f3995f7f3_74_destroy,"CharacterSkinSubState","destroy",0x2a0fd2c3,"CharacterSkinSubState.destroy","CharacterSkinSubState.hx",74,0xc78a89e7)
HX_LOCAL_STACK_FRAME(_hx_pos_fb6bd34f3995f7f3_38_boot,"CharacterSkinSubState","boot",0xa2b056c9,"CharacterSkinSubState.boot","CharacterSkinSubState.hx",38,0xc78a89e7)

void CharacterSkinSubState_obj::__construct(Float x,Float y,Float camX,Float camY){
            	HX_GC_STACKFRAME(&_hx_pos_fb6bd34f3995f7f3_18_new)
HXLINE(  61)		this->holdTime = ((Float)0);
HXLINE(  35)		this->curTime = ::Math_obj::max(( (Float)(0) ),::Conductor_obj::songPosition);
HXLINE(  25)		this->curSelected = 0;
HXLINE(  24)		this->difficultyChoices = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  23)		this->menuItemsOG = ::Array_obj< ::String >::fromData( _hx_array_data_3c7e9537_1,4);
HXLINE(  22)		this->menuItems = ::Array_obj< ::String >::__new(0);
HXLINE(  42)		super::__construct();
HXLINE(  44)		this->pauseMusic =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXLINE(  45)		if (::hx::IsNotNull( ::CharacterSkinSubState_obj::songName )) {
HXLINE(  46)			 ::flixel::_hx_system::FlxSound _hx_tmp = this->pauseMusic;
HXDLIN(  46)			::String library = null();
HXDLIN(  46)			 ::openfl::media::Sound file = ::Paths_obj::returnSound(HX_("music",a5,d0,5a,10),::CharacterSkinSubState_obj::songName,library);
HXDLIN(  46)			_hx_tmp->loadEmbedded(file,true,true,null());
            		}
            		else {
HXLINE(  47)			if ((::CharacterSkinSubState_obj::songName != HX_("None",d8,3e,e3,33))) {
HXLINE(  48)				 ::flixel::_hx_system::FlxSound _hx_tmp = this->pauseMusic;
HXDLIN(  48)				::String library = null();
HXDLIN(  48)				 ::openfl::media::Sound file = ::Paths_obj::returnSound(HX_("music",a5,d0,5a,10),::StringTools_obj::replace(::ClientPrefs_obj::pauseMusic.toLowerCase(),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)),library);
HXDLIN(  48)				_hx_tmp->loadEmbedded(file,true,true,null());
            			}
            		}
HXLINE(  50)		this->pauseMusic->set_volume(( (Float)(1) ));
HXLINE(  51)		 ::flixel::_hx_system::FlxSound _hx_tmp = this->pauseMusic;
HXDLIN(  51)		 ::flixel::math::FlxRandom _hx_tmp1 = ::flixel::FlxG_obj::random;
HXDLIN(  51)		_hx_tmp->play(false,_hx_tmp1->_hx_int(0,::Std_obj::_hx_int((this->pauseMusic->_length / ( (Float)(2) ))),null()),null());
HXLINE(  53)		::flixel::FlxG_obj::sound->list->add(this->pauseMusic).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXLINE(  55)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height,-16777216,null(),null());
HXLINE(  56)		bg->set_alpha(((Float)0.5));
HXLINE(  57)		bg->scrollFactor->set(null(),null());
HXLINE(  58)		this->add(bg);
            	}

Dynamic CharacterSkinSubState_obj::__CreateEmpty() { return new CharacterSkinSubState_obj; }

void *CharacterSkinSubState_obj::_hx_vtable = 0;

Dynamic CharacterSkinSubState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CharacterSkinSubState_obj > _hx_result = new CharacterSkinSubState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool CharacterSkinSubState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x5661ffbf) {
			if (inClassId<=(int)0x09847693) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x09847693;
			} else {
				return inClassId==(int)0x5661ffbf;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		if (inClassId<=(int)0x7ccf8994) {
			return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
		} else {
			return inClassId==(int)0x7fce3ab0;
		}
	}
}

void CharacterSkinSubState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_fb6bd34f3995f7f3_63_update)
HXLINE(  64)		this->super::update(elapsed);
HXLINE(  66)		bool upP = ::PlayerSettings_obj::player1->controls->_ui_upP->check();
HXLINE(  67)		bool downP = ::PlayerSettings_obj::player1->controls->_ui_downP->check();
HXLINE(  68)		bool leftP = ::PlayerSettings_obj::player1->controls->_ui_leftP->check();
HXLINE(  69)		bool rightP = ::PlayerSettings_obj::player1->controls->_ui_rightP->check();
HXLINE(  70)		bool accepted = ::PlayerSettings_obj::player1->controls->_accept->check();
            	}


void CharacterSkinSubState_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_fb6bd34f3995f7f3_74_destroy)
HXLINE(  75)		this->pauseMusic->destroy();
HXLINE(  77)		this->super::destroy();
            	}


::String CharacterSkinSubState_obj::songName;


::hx::ObjectPtr< CharacterSkinSubState_obj > CharacterSkinSubState_obj::__new(Float x,Float y,Float camX,Float camY) {
	::hx::ObjectPtr< CharacterSkinSubState_obj > __this = new CharacterSkinSubState_obj();
	__this->__construct(x,y,camX,camY);
	return __this;
}

::hx::ObjectPtr< CharacterSkinSubState_obj > CharacterSkinSubState_obj::__alloc(::hx::Ctx *_hx_ctx,Float x,Float y,Float camX,Float camY) {
	CharacterSkinSubState_obj *__this = (CharacterSkinSubState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CharacterSkinSubState_obj), true, "CharacterSkinSubState"));
	*(void **)__this = CharacterSkinSubState_obj::_hx_vtable;
	__this->__construct(x,y,camX,camY);
	return __this;
}

CharacterSkinSubState_obj::CharacterSkinSubState_obj()
{
}

void CharacterSkinSubState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CharacterSkinSubState);
	HX_MARK_MEMBER_NAME(grpMenuShit,"grpMenuShit");
	HX_MARK_MEMBER_NAME(menuItems,"menuItems");
	HX_MARK_MEMBER_NAME(menuItemsOG,"menuItemsOG");
	HX_MARK_MEMBER_NAME(difficultyChoices,"difficultyChoices");
	HX_MARK_MEMBER_NAME(curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(pausebg,"pausebg");
	HX_MARK_MEMBER_NAME(pausebg1,"pausebg1");
	HX_MARK_MEMBER_NAME(iconBG,"iconBG");
	HX_MARK_MEMBER_NAME(icon,"icon");
	HX_MARK_MEMBER_NAME(pauseMusic,"pauseMusic");
	HX_MARK_MEMBER_NAME(practiceText,"practiceText");
	HX_MARK_MEMBER_NAME(skipTimeText,"skipTimeText");
	HX_MARK_MEMBER_NAME(skipTimeTracker,"skipTimeTracker");
	HX_MARK_MEMBER_NAME(curTime,"curTime");
	HX_MARK_MEMBER_NAME(holdTime,"holdTime");
	 ::flixel::FlxSubState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CharacterSkinSubState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(grpMenuShit,"grpMenuShit");
	HX_VISIT_MEMBER_NAME(menuItems,"menuItems");
	HX_VISIT_MEMBER_NAME(menuItemsOG,"menuItemsOG");
	HX_VISIT_MEMBER_NAME(difficultyChoices,"difficultyChoices");
	HX_VISIT_MEMBER_NAME(curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(pausebg,"pausebg");
	HX_VISIT_MEMBER_NAME(pausebg1,"pausebg1");
	HX_VISIT_MEMBER_NAME(iconBG,"iconBG");
	HX_VISIT_MEMBER_NAME(icon,"icon");
	HX_VISIT_MEMBER_NAME(pauseMusic,"pauseMusic");
	HX_VISIT_MEMBER_NAME(practiceText,"practiceText");
	HX_VISIT_MEMBER_NAME(skipTimeText,"skipTimeText");
	HX_VISIT_MEMBER_NAME(skipTimeTracker,"skipTimeTracker");
	HX_VISIT_MEMBER_NAME(curTime,"curTime");
	HX_VISIT_MEMBER_NAME(holdTime,"holdTime");
	 ::flixel::FlxSubState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CharacterSkinSubState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"icon") ) { return ::hx::Val( icon ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"iconBG") ) { return ::hx::Val( iconBG ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pausebg") ) { return ::hx::Val( pausebg ); }
		if (HX_FIELD_EQ(inName,"curTime") ) { return ::hx::Val( curTime ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"pausebg1") ) { return ::hx::Val( pausebg1 ); }
		if (HX_FIELD_EQ(inName,"holdTime") ) { return ::hx::Val( holdTime ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { return ::hx::Val( menuItems ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pauseMusic") ) { return ::hx::Val( pauseMusic ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"grpMenuShit") ) { return ::hx::Val( grpMenuShit ); }
		if (HX_FIELD_EQ(inName,"menuItemsOG") ) { return ::hx::Val( menuItemsOG ); }
		if (HX_FIELD_EQ(inName,"curSelected") ) { return ::hx::Val( curSelected ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"practiceText") ) { return ::hx::Val( practiceText ); }
		if (HX_FIELD_EQ(inName,"skipTimeText") ) { return ::hx::Val( skipTimeText ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"skipTimeTracker") ) { return ::hx::Val( skipTimeTracker ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"difficultyChoices") ) { return ::hx::Val( difficultyChoices ); }
	}
	return super::__Field(inName,inCallProp);
}

bool CharacterSkinSubState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"songName") ) { outValue = ( songName ); return true; }
	}
	return false;
}

::hx::Val CharacterSkinSubState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"icon") ) { icon=inValue.Cast<  ::HealthIcon >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"iconBG") ) { iconBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pausebg") ) { pausebg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curTime") ) { curTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"pausebg1") ) { pausebg1=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"holdTime") ) { holdTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { menuItems=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pauseMusic") ) { pauseMusic=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"grpMenuShit") ) { grpMenuShit=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"menuItemsOG") ) { menuItemsOG=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"practiceText") ) { practiceText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skipTimeText") ) { skipTimeText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"skipTimeTracker") ) { skipTimeTracker=inValue.Cast<  ::Alphabet >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"difficultyChoices") ) { difficultyChoices=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool CharacterSkinSubState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"songName") ) { songName=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void CharacterSkinSubState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("grpMenuShit",04,32,b8,f0));
	outFields->push(HX_("menuItems",e1,15,e5,5c));
	outFields->push(HX_("menuItemsOG",39,55,bf,30));
	outFields->push(HX_("difficultyChoices",f7,9c,00,1a));
	outFields->push(HX_("curSelected",fb,eb,ab,32));
	outFields->push(HX_("pausebg",3b,56,34,a4));
	outFields->push(HX_("pausebg1",96,1d,97,09));
	outFields->push(HX_("iconBG",7e,b1,d6,45));
	outFields->push(HX_("icon",79,e7,b2,45));
	outFields->push(HX_("pauseMusic",cf,6d,d3,e5));
	outFields->push(HX_("practiceText",08,73,28,84));
	outFields->push(HX_("skipTimeText",f9,38,2b,55));
	outFields->push(HX_("skipTimeTracker",ec,2a,bf,89));
	outFields->push(HX_("curTime",ad,3d,12,b8));
	outFields->push(HX_("holdTime",ec,cc,bf,3e));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CharacterSkinSubState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(CharacterSkinSubState_obj,grpMenuShit),HX_("grpMenuShit",04,32,b8,f0)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(CharacterSkinSubState_obj,menuItems),HX_("menuItems",e1,15,e5,5c)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(CharacterSkinSubState_obj,menuItemsOG),HX_("menuItemsOG",39,55,bf,30)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(CharacterSkinSubState_obj,difficultyChoices),HX_("difficultyChoices",f7,9c,00,1a)},
	{::hx::fsInt,(int)offsetof(CharacterSkinSubState_obj,curSelected),HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CharacterSkinSubState_obj,pausebg),HX_("pausebg",3b,56,34,a4)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CharacterSkinSubState_obj,pausebg1),HX_("pausebg1",96,1d,97,09)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CharacterSkinSubState_obj,iconBG),HX_("iconBG",7e,b1,d6,45)},
	{::hx::fsObject /*  ::HealthIcon */ ,(int)offsetof(CharacterSkinSubState_obj,icon),HX_("icon",79,e7,b2,45)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(CharacterSkinSubState_obj,pauseMusic),HX_("pauseMusic",cf,6d,d3,e5)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(CharacterSkinSubState_obj,practiceText),HX_("practiceText",08,73,28,84)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(CharacterSkinSubState_obj,skipTimeText),HX_("skipTimeText",f9,38,2b,55)},
	{::hx::fsObject /*  ::Alphabet */ ,(int)offsetof(CharacterSkinSubState_obj,skipTimeTracker),HX_("skipTimeTracker",ec,2a,bf,89)},
	{::hx::fsFloat,(int)offsetof(CharacterSkinSubState_obj,curTime),HX_("curTime",ad,3d,12,b8)},
	{::hx::fsFloat,(int)offsetof(CharacterSkinSubState_obj,holdTime),HX_("holdTime",ec,cc,bf,3e)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo CharacterSkinSubState_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &CharacterSkinSubState_obj::songName,HX_("songName",c0,d0,d7,36)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String CharacterSkinSubState_obj_sMemberFields[] = {
	HX_("grpMenuShit",04,32,b8,f0),
	HX_("menuItems",e1,15,e5,5c),
	HX_("menuItemsOG",39,55,bf,30),
	HX_("difficultyChoices",f7,9c,00,1a),
	HX_("curSelected",fb,eb,ab,32),
	HX_("pausebg",3b,56,34,a4),
	HX_("pausebg1",96,1d,97,09),
	HX_("iconBG",7e,b1,d6,45),
	HX_("icon",79,e7,b2,45),
	HX_("pauseMusic",cf,6d,d3,e5),
	HX_("practiceText",08,73,28,84),
	HX_("skipTimeText",f9,38,2b,55),
	HX_("skipTimeTracker",ec,2a,bf,89),
	HX_("curTime",ad,3d,12,b8),
	HX_("holdTime",ec,cc,bf,3e),
	HX_("update",09,86,05,87),
	HX_("destroy",fa,2c,86,24),
	::String(null()) };

static void CharacterSkinSubState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CharacterSkinSubState_obj::songName,"songName");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CharacterSkinSubState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CharacterSkinSubState_obj::songName,"songName");
};

#endif

::hx::Class CharacterSkinSubState_obj::__mClass;

static ::String CharacterSkinSubState_obj_sStaticFields[] = {
	HX_("songName",c0,d0,d7,36),
	::String(null())
};

void CharacterSkinSubState_obj::__register()
{
	CharacterSkinSubState_obj _hx_dummy;
	CharacterSkinSubState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("CharacterSkinSubState",37,95,7e,3c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CharacterSkinSubState_obj::__GetStatic;
	__mClass->mSetStaticField = &CharacterSkinSubState_obj::__SetStatic;
	__mClass->mMarkFunc = CharacterSkinSubState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(CharacterSkinSubState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CharacterSkinSubState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CharacterSkinSubState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CharacterSkinSubState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CharacterSkinSubState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CharacterSkinSubState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CharacterSkinSubState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_fb6bd34f3995f7f3_38_boot)
HXDLIN(  38)		songName = HX_("",00,00,00,00);
            	}
}

