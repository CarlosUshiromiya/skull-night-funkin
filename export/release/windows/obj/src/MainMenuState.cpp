// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_AchievementObject
#include <AchievementObject.h>
#endif
#ifndef INCLUDED_Achievements
#include <Achievements.h>
#endif
#ifndef INCLUDED_AchievementsMenuState
#include <AchievementsMenuState.h>
#endif
#ifndef INCLUDED_ClientPrefs
#include <ClientPrefs.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_CreditsState
#include <CreditsState.h>
#endif
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_FreeplayState
#include <FreeplayState.h>
#endif
#ifndef INCLUDED_HealthIcon
#include <HealthIcon.h>
#endif
#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_ModsMenuState
#include <ModsMenuState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StoryMenuState
#include <StoryMenuState.h>
#endif
#ifndef INCLUDED_TitleState
#include <TitleState.h>
#endif
#ifndef INCLUDED_WeekData
#include <WeekData.h>
#endif
#ifndef INCLUDED_editors_MasterEditorMenu
#include <editors/MasterEditorMenu.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_options_OptionsState
#include <options/OptionsState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_27_new,"MainMenuState","new",0x83a7c9cb,"MainMenuState.new","MainMenuState.hx",27,0x0e5db805)
static const ::String _hx_array_data_205e8859_1[] = {
	HX_("story_mode",2d,63,e6,a4),HX_("freeplay",a0,90,86,22),HX_("mods",71,d3,60,48),HX_("awards",b6,92,c1,8d),HX_("credits",1a,0e,5e,13),HX_("options",5e,33,fe,df),
};
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_58_create,"MainMenuState","create",0x6b76e271,"MainMenuState.create","MainMenuState.hx",58,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_124_create,"MainMenuState","create",0x6b76e271,"MainMenuState.create","MainMenuState.hx",124,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_239_giveAchievement,"MainMenuState","giveAchievement",0x39ddd809,"MainMenuState.giveAchievement","MainMenuState.hx",239,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_249_update,"MainMenuState","update",0x766d017e,"MainMenuState.update","MainMenuState.hx",249,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_321_update,"MainMenuState","update",0x766d017e,"MainMenuState.update","MainMenuState.hx",321,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_326_update,"MainMenuState","update",0x766d017e,"MainMenuState.update","MainMenuState.hx",326,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_332_update,"MainMenuState","update",0x766d017e,"MainMenuState.update","MainMenuState.hx",332,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_348_update,"MainMenuState","update",0x766d017e,"MainMenuState.update","MainMenuState.hx",348,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_367_update,"MainMenuState","update",0x766d017e,"MainMenuState.update","MainMenuState.hx",367,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_375_goToState,"MainMenuState","goToState",0xcf6f00f9,"MainMenuState.goToState","MainMenuState.hx",375,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_401_hideit,"MainMenuState","hideit",0x3bfe40a2,"MainMenuState.hideit","MainMenuState.hx",401,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_398_hideit,"MainMenuState","hideit",0x3bfe40a2,"MainMenuState.hideit","MainMenuState.hx",398,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_416_changeItem,"MainMenuState","changeItem",0xf62bd498,"MainMenuState.changeItem","MainMenuState.hx",416,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_407_changeItem,"MainMenuState","changeItem",0xf62bd498,"MainMenuState.changeItem","MainMenuState.hx",407,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_445_beatHit,"MainMenuState","beatHit",0xff297568,"MainMenuState.beatHit","MainMenuState.hx",445,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_29_boot,"MainMenuState","boot",0xa741c867,"MainMenuState.boot","MainMenuState.hx",29,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_30_boot,"MainMenuState","boot",0xa741c867,"MainMenuState.boot","MainMenuState.hx",30,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_47_boot,"MainMenuState","boot",0xa741c867,"MainMenuState.boot","MainMenuState.hx",47,0x0e5db805)

void MainMenuState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_27_new)
HXLINE( 246)		this->selectedSomethin = false;
HXLINE(  52)		this->thisShit = false;
HXLINE(  36)		this->optionShit = ::Array_obj< ::String >::fromData( _hx_array_data_205e8859_1,6);
HXLINE(  27)		super::__construct(TransIn,TransOut);
            	}

Dynamic MainMenuState_obj::__CreateEmpty() { return new MainMenuState_obj; }

void *MainMenuState_obj::_hx_vtable = 0;

Dynamic MainMenuState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MainMenuState_obj > _hx_result = new MainMenuState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool MainMenuState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x3f706236 || inClassId==(int)0x62817b24;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x6915cded || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void MainMenuState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_58_create)
HXLINE(  57)		 ::MainMenuState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  59)		::WeekData_obj::loadTheFirstEnabledMod();
HXLINE(  63)		::DiscordClient_obj::changePresence(HX_("In the Menus",0a,c1,ad,c6),null(),null(),null(),null());
HXLINE(  65)		this->debugKeys = ::ClientPrefs_obj::copyKey(( (::Array< int >)(::ClientPrefs_obj::keyBinds->get(HX_("debug_1",05,20,57,5b))) ));
HXLINE(  67)		this->camGame =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE(  68)		this->camAchievement =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE(  69)		{
HXLINE(  69)			 ::flixel::FlxCamera _hx_tmp = this->camAchievement;
HXDLIN(  69)			_hx_tmp->bgColor = (_hx_tmp->bgColor & 16777215);
HXDLIN(  69)			 ::flixel::FlxCamera _hx_tmp1 = this->camAchievement;
HXDLIN(  69)			_hx_tmp1->bgColor = (_hx_tmp1->bgColor | 0);
            		}
HXLINE(  71)		::flixel::FlxG_obj::cameras->reset(this->camGame);
HXLINE(  72)		::flixel::FlxG_obj::cameras->add(this->camAchievement).StaticCast<  ::flixel::FlxCamera >();
HXLINE(  73)		::flixel::FlxCamera_obj::defaultCameras = ::Array_obj< ::Dynamic>::__new(1)->init(0,this->camGame);
HXLINE(  75)		this->transIn = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransIn;
HXLINE(  76)		this->transOut = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransOut;
HXLINE(  78)		this->persistentUpdate = (this->persistentDraw = true);
HXLINE(  80)		Float yScroll = ::Math_obj::max((((Float)0.25) - (((Float)0.05) * ( (Float)((this->optionShit->length - 4)) ))),((Float)0.1));
HXLINE(  81)		 ::flixel::FlxSprite _hx_tmp2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-80,null(),null());
HXDLIN(  81)		::String library = null();
HXDLIN(  81)		 ::flixel::graphics::FlxGraphic returnAsset = ::Paths_obj::returnGraphic(HX_("menuBG",24,65,6d,05),library);
HXDLIN(  81)		this->bg = _hx_tmp2->loadGraphic(returnAsset,null(),null(),null(),null(),null());
HXLINE(  82)		this->bg->scrollFactor->set(0,yScroll);
HXLINE(  83)		 ::flixel::FlxSprite _hx_tmp3 = this->bg;
HXDLIN(  83)		_hx_tmp3->setGraphicSize(::Std_obj::_hx_int((this->bg->get_width() * ((Float)1.175))),null());
HXLINE(  84)		this->bg->updateHitbox();
HXLINE(  85)		this->bg->screenCenter(null());
HXLINE(  86)		this->bg->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE(  87)		this->add(this->bg);
HXLINE(  89)		this->camFollow =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,1,1);
HXLINE(  90)		this->camFollowPos =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,1,1);
HXLINE(  91)		this->add(this->camFollow);
HXLINE(  92)		this->add(this->camFollowPos);
HXLINE(  94)		this->menuItems =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  95)		this->add(this->menuItems);
HXLINE(  97)		Float scale = ( (Float)(1) );
HXLINE( 102)		{
HXLINE( 102)			int _g = 0;
HXDLIN( 102)			int _g1 = this->optionShit->length;
HXDLIN( 102)			while((_g < _g1)){
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::MainMenuState,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween flxTween){
            					HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_124_create)
HXLINE( 125)					_gthis->changeItem(null());
HXLINE( 126)					_gthis->thisShit = true;
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 102)				_g = (_g + 1);
HXDLIN( 102)				int i = (_g - 1);
HXLINE( 104)				Float offset = (( (Float)(108) ) - ((::Math_obj::max(( (Float)(this->optionShit->length) ),( (Float)(4) )) - ( (Float)(4) )) * ( (Float)(80) )));
HXLINE( 105)				 ::flixel::FlxSprite menuItem =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,::flixel::FlxG_obj::width,((i * 140) + offset),null());
HXLINE( 106)				menuItem->scale->set_x(scale);
HXLINE( 107)				menuItem->scale->set_y(scale);
HXLINE( 108)				::String key = (HX_("mainmenu/menu_",a9,7b,4b,27) + this->optionShit->__get(i));
HXDLIN( 108)				::String library = null();
HXDLIN( 108)				 ::flixel::graphics::FlxGraphic imageLoaded = ::Paths_obj::returnGraphic(key,null());
HXDLIN( 108)				bool xmlExists = false;
HXDLIN( 108)				if (::sys::FileSystem_obj::exists(::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + key) + HX_(".xml",69,3e,c3,1e))))) {
HXLINE( 108)					xmlExists = true;
            				}
HXDLIN( 108)				 ::Dynamic _hx_tmp;
HXDLIN( 108)				if (::hx::IsNotNull( imageLoaded )) {
HXLINE( 108)					_hx_tmp = imageLoaded;
            				}
            				else {
HXLINE( 108)					 ::flixel::graphics::FlxGraphic returnAsset = ::Paths_obj::returnGraphic(key,library);
HXDLIN( 108)					_hx_tmp = returnAsset;
            				}
HXDLIN( 108)				::String _hx_tmp1;
HXDLIN( 108)				if (xmlExists) {
HXLINE( 108)					_hx_tmp1 = ::sys::io::File_obj::getContent(::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + key) + HX_(".xml",69,3e,c3,1e))));
            				}
            				else {
HXLINE( 108)					_hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + key) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library);
            				}
HXDLIN( 108)				menuItem->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,_hx_tmp1));
HXLINE( 109)				menuItem->animation->addByPrefix(HX_("idle",14,a7,b3,45),(this->optionShit->__get(i) + HX_(" basic",8e,b6,25,79)),24,null(),null(),null());
HXLINE( 110)				menuItem->animation->addByPrefix(HX_("selected",5b,2a,6d,b1),(this->optionShit->__get(i) + HX_(" white",89,d6,28,95)),24,null(),null(),null());
HXLINE( 111)				menuItem->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 112)				menuItem->ID = i;
HXLINE( 113)				menuItem->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 114)				this->menuItems->add(menuItem).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 115)				Float scr = (( (Float)((this->optionShit->length - 4)) ) * ((Float)0.135));
HXLINE( 116)				if ((this->optionShit->length < 3)) {
HXLINE( 117)					scr = ( (Float)(0) );
            				}
HXLINE( 118)				menuItem->scrollFactor->set(0,scr);
HXLINE( 119)				menuItem->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE( 121)				::flixel::tweens::FlxTween_obj::tween(menuItem, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("y",79,00,00,00),(30 + (i * 120)))),(1 + (( (Float)(i) ) * ((Float)0.25))), ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoInOut_dyn())
            					->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis)))));
HXLINE( 129)				menuItem->updateHitbox();
            			}
            		}
HXLINE( 132)		if (!(::ClientPrefs_obj::lowQuality)) {
HXLINE( 134)			this->logoBl =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,-100,null());
HXLINE( 136)			 ::flixel::FlxSprite _hx_tmp = this->logoBl;
HXDLIN( 136)			::String library = null();
HXDLIN( 136)			 ::flixel::graphics::FlxGraphic imageLoaded = ::Paths_obj::returnGraphic(HX_("logoBumpin",26,cb,02,ab),null());
HXDLIN( 136)			bool xmlExists = false;
HXDLIN( 136)			if (::sys::FileSystem_obj::exists(::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + HX_("logoBumpin",26,cb,02,ab)) + HX_(".xml",69,3e,c3,1e))))) {
HXLINE( 136)				xmlExists = true;
            			}
HXDLIN( 136)			 ::Dynamic _hx_tmp1;
HXDLIN( 136)			if (::hx::IsNotNull( imageLoaded )) {
HXLINE( 136)				_hx_tmp1 = imageLoaded;
            			}
            			else {
HXLINE( 136)				 ::flixel::graphics::FlxGraphic returnAsset = ::Paths_obj::returnGraphic(HX_("logoBumpin",26,cb,02,ab),library);
HXDLIN( 136)				_hx_tmp1 = returnAsset;
            			}
HXDLIN( 136)			::String _hx_tmp2;
HXDLIN( 136)			if (xmlExists) {
HXLINE( 136)				_hx_tmp2 = ::sys::io::File_obj::getContent(::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + HX_("logoBumpin",26,cb,02,ab)) + HX_(".xml",69,3e,c3,1e))));
            			}
            			else {
HXLINE( 136)				_hx_tmp2 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("logoBumpin",26,cb,02,ab)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library);
            			}
HXDLIN( 136)			_hx_tmp->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp1,_hx_tmp2));
HXLINE( 137)			this->logoBl->scrollFactor->set(null(),null());
HXLINE( 138)			this->logoBl->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE( 139)			this->logoBl->animation->addByPrefix(HX_("bump",f6,0f,20,41),HX_("logo bumpin",70,a1,0b,72),24,false,null(),null());
HXLINE( 140)			 ::flixel::FlxSprite _hx_tmp3 = this->logoBl;
HXDLIN( 140)			_hx_tmp3->setGraphicSize(::Std_obj::_hx_int((this->logoBl->get_width() * ((Float)0.5))),null());
HXLINE( 141)			this->logoBl->animation->play(HX_("bump",f6,0f,20,41),null(),null(),null());
HXLINE( 142)			this->logoBl->set_alpha(( (Float)(0) ));
HXLINE( 143)			this->logoBl->set_angle(( (Float)(-4) ));
HXLINE( 144)			this->logoBl->updateHitbox();
HXLINE( 145)			this->add(this->logoBl);
HXLINE( 146)			::flixel::tweens::FlxTween_obj::tween(this->logoBl, ::Dynamic(::hx::Anon_obj::Create(4)
            				->setFixed(0,HX_("x",78,00,00,00),(this->logoBl->x + 112))
            				->setFixed(1,HX_("y",79,00,00,00),(this->logoBl->y + 64))
            				->setFixed(2,HX_("alpha",5e,a7,96,21),1)
            				->setFixed(3,HX_("angle",d3,43,e2,22),-4)),((Float)1.4), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoInOut_dyn())));
            		}
HXLINE( 154)		::flixel::FlxG_obj::camera->follow(this->camFollowPos,null(),1);
HXLINE( 156)		 ::flixel::text::FlxText versionShit =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,12,(::flixel::FlxG_obj::height - 64),0,(HX_("Psych Engine v",5d,a0,37,c7) + ::MainMenuState_obj::psychEngineVersion),12,null());
HXLINE( 157)		versionShit->scrollFactor->set(null(),null());
HXLINE( 158)		versionShit->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 159)		versionShit->setFormat(HX_("vcr.ttf",9d,d2,a7,82),16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 160)		this->add(versionShit);
HXLINE( 161)		int versionShit1 = (::flixel::FlxG_obj::height - 24);
HXDLIN( 161)		 ::flixel::text::FlxText versionShit2 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,12,versionShit1,0,(HX_("Friday Night Funkin' v",03,65,b0,2f) + ::lime::app::Application_obj::current->meta->get(HX_("version",18,e7,f1,7c))),12,null());
HXLINE( 162)		versionShit2->scrollFactor->set(null(),null());
HXLINE( 163)		versionShit2->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 164)		versionShit2->setFormat(HX_("vcr.ttf",9d,d2,a7,82),16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 165)		this->add(versionShit2);
HXLINE( 167)		if (!(::ClientPrefs_obj::lowQuality)) {
HXLINE( 169)			 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 169)			::String library = null();
HXDLIN( 169)			 ::flixel::graphics::FlxGraphic returnAsset = ::Paths_obj::returnGraphic(HX_("iconbackground",a7,ec,37,da),library);
HXDLIN( 169)			this->iconBG = _hx_tmp->loadGraphic(returnAsset,null(),null(),null(),null(),null());
HXLINE( 170)			this->iconBG->scrollFactor->set(null(),null());
HXLINE( 171)			this->iconBG->updateHitbox();
HXLINE( 172)			this->iconBG->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE( 173)			this->add(this->iconBG);
HXLINE( 175)			switch((int)(::flixel::FlxG_obj::random->_hx_int(1,5,null()))){
            				case (int)1: {
HXLINE( 178)					this->icon =  ::HealthIcon_obj::__alloc( HX_CTX ,HX_("bf",c4,55,00,00),null());
HXLINE( 179)					 ::HealthIcon _hx_tmp = this->icon;
HXDLIN( 179)					_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->icon->get_width() * ( (Float)(2) ))),null());
HXLINE( 180)					this->iconBG->set_color(-16711681);
            				}
            				break;
            				case (int)2: {
HXLINE( 182)					this->icon =  ::HealthIcon_obj::__alloc( HX_CTX ,HX_("gf",1f,5a,00,00),null());
HXLINE( 183)					 ::HealthIcon _hx_tmp = this->icon;
HXDLIN( 183)					_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->icon->get_width() * ( (Float)(2) ))),null());
HXLINE( 184)					this->iconBG->set_color(-65536);
            				}
            				break;
            				case (int)3: {
HXLINE( 186)					this->icon =  ::HealthIcon_obj::__alloc( HX_CTX ,HX_("dad",47,36,4c,00),null());
HXLINE( 187)					 ::HealthIcon _hx_tmp = this->icon;
HXDLIN( 187)					_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->icon->get_width() * ((Float)1.7))),null());
HXLINE( 188)					this->iconBG->set_color(-8388480);
            				}
            				break;
            				case (int)4: {
HXLINE( 190)					this->icon =  ::HealthIcon_obj::__alloc( HX_CTX ,HX_("mom",cb,16,53,00),null());
HXLINE( 191)					 ::HealthIcon _hx_tmp = this->icon;
HXDLIN( 191)					_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->icon->get_width() * ((Float)1.8))),null());
HXLINE( 192)					this->iconBG->set_color(-8388480);
            				}
            				break;
            				case (int)5: {
HXLINE( 194)					this->icon =  ::HealthIcon_obj::__alloc( HX_CTX ,HX_("spooky",eb,bd,9e,c1),null());
HXLINE( 195)					 ::HealthIcon _hx_tmp = this->icon;
HXDLIN( 195)					_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->icon->get_width() * ( (Float)(2) ))),null());
HXLINE( 196)					switch((int)(::flixel::FlxG_obj::random->_hx_int(1,2,null()))){
            						case (int)1: {
HXLINE( 199)							this->iconBG->set_color(-23296);
            						}
            						break;
            						case (int)2: {
HXLINE( 201)							this->iconBG->set_color(-1);
            						}
            						break;
            					}
            				}
            				break;
            			}
HXLINE( 207)			this->icon->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE( 208)			this->icon->set_x(( (Float)(70) ));
HXLINE( 209)			this->icon->set_y(( (Float)((::flixel::FlxG_obj::height - 180)) ));
HXLINE( 210)			this->icon->scrollFactor->set(null(),null());
HXLINE( 211)			this->icon->updateHitbox();
HXLINE( 212)			this->add(this->icon);
HXLINE( 213)			::haxe::Log_obj::trace(this->iconBG->color,::hx::SourceInfo(HX_("source/MainMenuState.hx",f9,ee,86,cf),213,HX_("MainMenuState",59,88,5e,20),HX_("create",fc,66,0f,7c)));
HXLINE( 214)			::haxe::Log_obj::trace(this->icon,::hx::SourceInfo(HX_("source/MainMenuState.hx",f9,ee,86,cf),214,HX_("MainMenuState",59,88,5e,20),HX_("create",fc,66,0f,7c)));
            		}
HXLINE( 219)		this->changeItem(null());
HXLINE( 222)		::Achievements_obj::loadAchievements();
HXLINE( 223)		 ::Date leDate = ::Date_obj::now();
HXLINE( 224)		bool _hx_tmp4;
HXDLIN( 224)		if ((leDate->getDay() == 5)) {
HXLINE( 224)			_hx_tmp4 = (leDate->getHours() >= 18);
            		}
            		else {
HXLINE( 224)			_hx_tmp4 = false;
            		}
HXDLIN( 224)		if (_hx_tmp4) {
HXLINE( 225)			int achieveID = ::Achievements_obj::getAchievementIndex(HX_("friday_night_play",9b,1f,4e,c7));
HXLINE( 226)			if (!(::Achievements_obj::isAchievementUnlocked(( (::String)(::Achievements_obj::achievementsStuff->__get(achieveID)->__GetItem(2)) )))) {
HXLINE( 227)				::Achievements_obj::achievementsMap->set(( (::String)(::Achievements_obj::achievementsStuff->__get(achieveID)->__GetItem(2)) ),true);
HXLINE( 228)				this->giveAchievement();
HXLINE( 229)				::ClientPrefs_obj::saveSettings();
            			}
            		}
HXLINE( 234)		this->super::create();
            	}


void MainMenuState_obj::giveAchievement(){
            	HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_239_giveAchievement)
HXLINE( 240)		this->add( ::AchievementObject_obj::__alloc( HX_CTX ,HX_("friday_night_play",9b,1f,4e,c7),this->camAchievement));
HXLINE( 241)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 241)		_hx_tmp->play(::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null()),((Float)0.7),null(),null(),null(),null());
HXLINE( 242)		::haxe::Log_obj::trace(HX_("Giving achievement \"friday_night_play\"",e6,1b,7d,1f),::hx::SourceInfo(HX_("source/MainMenuState.hx",f9,ee,86,cf),242,HX_("MainMenuState",59,88,5e,20),HX_("giveAchievement",1e,ea,83,24)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MainMenuState_obj,giveAchievement,(void))

void MainMenuState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_249_update)
HXLINE( 248)		 ::MainMenuState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 250)		if ((::flixel::FlxG_obj::sound->music->_volume < ((Float)0.8))) {
HXLINE( 252)			 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN( 252)			_g->set_volume((_g->_volume + (((Float)0.5) * ::flixel::FlxG_obj::elapsed)));
            		}
HXLINE( 255)		::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
HXLINE( 257)		Float lerpVal = ::Math_obj::max(( (Float)(0) ),::Math_obj::min(( (Float)(1) ),(elapsed * ((Float)7.5))));
HXLINE( 258)		Float a = this->camFollowPos->x;
HXDLIN( 258)		Float a1 = this->camFollowPos->y;
HXDLIN( 258)		this->camFollowPos->setPosition((a + (lerpVal * (this->camFollow->x - a))),(a1 + (lerpVal * (this->camFollow->y - a1))));
HXLINE( 260)		bool _hx_tmp;
HXDLIN( 260)		if (!(this->selectedSomethin)) {
HXLINE( 260)			_hx_tmp = this->thisShit;
            		}
            		else {
HXLINE( 260)			_hx_tmp = false;
            		}
HXDLIN( 260)		if (_hx_tmp) {
HXLINE( 262)			if (::PlayerSettings_obj::player1->controls->_ui_upP->check()) {
HXLINE( 264)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 264)				_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
HXLINE( 265)				this->changeItem(-1);
            			}
HXLINE( 268)			if (::PlayerSettings_obj::player1->controls->_ui_downP->check()) {
HXLINE( 270)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 270)				_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
HXLINE( 271)				this->changeItem(1);
            			}
HXLINE( 274)			if (((-1 * ::Math_obj::floor(( (Float)(::flixel::FlxG_obj::mouse->wheel) ))) != 0)) {
HXLINE( 276)				this->changeItem((-1 * ::Math_obj::floor(( (Float)(::flixel::FlxG_obj::mouse->wheel) ))));
HXLINE( 277)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 277)				_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
HXLINE( 278)				::haxe::Log_obj::trace((HX_("lol ",77,a3,b7,47) + ::MainMenuState_obj::curSelected),::hx::SourceInfo(HX_("source/MainMenuState.hx",f9,ee,86,cf),278,HX_("MainMenuState",59,88,5e,20),HX_("update",09,86,05,87)));
            			}
HXLINE( 281)			if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE( 283)				this->selectedSomethin = true;
HXLINE( 284)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 284)				_hx_tmp->play(::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null()),null(),null(),null(),null(),null());
HXLINE( 285)				::MusicBeatState_obj::switchState( ::TitleState_obj::__alloc( HX_CTX ,null(),null()));
HXLINE( 287)				::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("zoom",13,a3,f8,50),5)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 288)				::flixel::tweens::FlxTween_obj::tween(this->bg, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("angle",d3,43,e2,22),45)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 289)				::flixel::tweens::FlxTween_obj::tween(this->bg, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 290)				if (!(::ClientPrefs_obj::lowQuality)) {
HXLINE( 292)					::flixel::tweens::FlxTween_obj::tween(this->logoBl, ::Dynamic(::hx::Anon_obj::Create(4)
            						->setFixed(0,HX_("x",78,00,00,00),-100)
            						->setFixed(1,HX_("y",79,00,00,00),-100)
            						->setFixed(2,HX_("alpha",5e,a7,96,21),0)
            						->setFixed(3,HX_("angle",d3,43,e2,22),4)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
HXLINE( 298)					::flixel::tweens::FlxTween_obj::tween(this->icon, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("x",78,00,00,00),(this->icon->x - ( (Float)(20) )))
            						->setFixed(1,HX_("y",79,00,00,00),(this->icon->y + 20))),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
            				}
            			}
HXLINE( 302)			bool _hx_tmp;
HXDLIN( 302)			if (!(::PlayerSettings_obj::player1->controls->_accept->check())) {
HXLINE( 302)				_hx_tmp = (::flixel::FlxG_obj::mouse->_leftButton->current == 2);
            			}
            			else {
HXLINE( 302)				_hx_tmp = true;
            			}
HXDLIN( 302)			if (_hx_tmp) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::MainMenuState,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_321_update)
HXLINE( 321)					_gthis->hideit(((Float)0.6));
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::MainMenuState,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::FlxSprite spr){
            					HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_326_update)
HXLINE( 326)					if ((::MainMenuState_obj::curSelected != spr->ID)) {
            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::flixel::FlxSprite,spr) HXARGC(1)
            						void _hx_run( ::flixel::tweens::FlxTween twn){
            							HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_332_update)
HXLINE( 332)							spr->kill();
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE( 328)						::flixel::tweens::FlxTween_obj::tween(spr, ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("x",78,00,00,00),1500)
            							->setFixed(1,HX_("alpha",5e,a7,96,21),((Float)0.1))),1, ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())
            							->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(spr)))));
HXLINE( 335)						::flixel::tweens::FlxTween_obj::tween(spr, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("x",78,00,00,00),1500)),1, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
            					}
            					else {
            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::MainMenuState,_gthis) HXARGC(1)
            						void _hx_run( ::flixel::util::FlxTimer tmr){
            							HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_348_update)
HXLINE( 348)							_gthis->goToState();
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE( 341)						spr->updateHitbox();
HXLINE( 343)						::flixel::tweens::FlxTween_obj::tween(spr, ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("x",78,00,00,00),(spr->x - ( (Float)(240) )))
            							->setFixed(1,HX_("y",79,00,00,00),260)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
HXLINE( 344)						::flixel::tweens::FlxTween_obj::tween(spr->scale, ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("x",78,00,00,00),((Float)1.2))
            							->setFixed(1,HX_("y",79,00,00,00),((Float)1.2))),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
HXLINE( 346)						 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_2(_gthis)),null());
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 304)				this->selectedSomethin = true;
HXLINE( 305)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 305)				_hx_tmp->play(::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null()),null(),null(),null(),null(),null());
HXLINE( 307)				::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("zoom",13,a3,f8,50),5)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 308)				::flixel::tweens::FlxTween_obj::tween(this->bg, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("angle",d3,43,e2,22),45)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE( 309)				if (!(::ClientPrefs_obj::lowQuality)) {
HXLINE( 311)					::flixel::tweens::FlxTween_obj::tween(this->logoBl, ::Dynamic(::hx::Anon_obj::Create(4)
            						->setFixed(0,HX_("x",78,00,00,00),(this->logoBl->x - ( (Float)(30) )))
            						->setFixed(1,HX_("y",79,00,00,00),(this->logoBl->y - ( (Float)(30) )))
            						->setFixed(2,HX_("alpha",5e,a7,96,21),0)
            						->setFixed(3,HX_("angle",d3,43,e2,22),4)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
HXLINE( 317)					::flixel::tweens::FlxTween_obj::tween(this->icon, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("x",78,00,00,00),(this->icon->x - ( (Float)(10) )))
            						->setFixed(1,HX_("y",79,00,00,00),(this->icon->y + 10))),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
            				}
HXLINE( 319)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.2), ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE( 324)				this->menuItems->forEach( ::Dynamic(new _hx_Closure_3(_gthis)),null());
            			}
            			else {
HXLINE( 354)				if (::flixel::FlxG_obj::keys->checkKeyArrayState(this->debugKeys,2)) {
HXLINE( 356)					this->selectedSomethin = true;
HXLINE( 357)					::MusicBeatState_obj::switchState( ::editors::MasterEditorMenu_obj::__alloc( HX_CTX ,null(),null()));
            				}
            			}
            		}
HXLINE( 362)		this->super::update(elapsed);
HXLINE( 364)		if (!(this->selectedSomethin)) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_4) HXARGC(1)
            			void _hx_run( ::flixel::FlxSprite spr){
            				HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_367_update)
HXLINE( 368)				spr->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 369)				{
HXLINE( 369)					 ::flixel::FlxSprite _g = spr;
HXDLIN( 369)					_g->set_x((_g->x + 240));
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 366)			this->menuItems->forEach( ::Dynamic(new _hx_Closure_4()),null());
            		}
            	}


void MainMenuState_obj::goToState(){
            	HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_375_goToState)
HXLINE( 376)		::String daChoice = this->optionShit->__get(::MainMenuState_obj::curSelected);
HXLINE( 378)		::String _hx_switch_0 = daChoice;
            		if (  (_hx_switch_0==HX_("awards",b6,92,c1,8d)) ){
HXLINE( 389)			::MusicBeatState_obj::switchState( ::AchievementsMenuState_obj::__alloc( HX_CTX ,null(),null()));
HXDLIN( 389)			goto _hx_goto_12;
            		}
            		if (  (_hx_switch_0==HX_("credits",1a,0e,5e,13)) ){
HXLINE( 391)			::MusicBeatState_obj::switchState( ::CreditsState_obj::__alloc( HX_CTX ,null(),null()));
HXDLIN( 391)			goto _hx_goto_12;
            		}
            		if (  (_hx_switch_0==HX_("freeplay",a0,90,86,22)) ){
HXLINE( 383)			::MusicBeatState_obj::switchState( ::FreeplayState_obj::__alloc( HX_CTX ,null(),null()));
HXDLIN( 383)			goto _hx_goto_12;
            		}
            		if (  (_hx_switch_0==HX_("mods",71,d3,60,48)) ){
HXLINE( 386)			::MusicBeatState_obj::switchState( ::ModsMenuState_obj::__alloc( HX_CTX ,null(),null()));
HXDLIN( 386)			goto _hx_goto_12;
            		}
            		if (  (_hx_switch_0==HX_("options",5e,33,fe,df)) ){
HXLINE( 393)			::MusicBeatState_obj::switchState( ::options::OptionsState_obj::__alloc( HX_CTX ,null(),null()));
HXDLIN( 393)			goto _hx_goto_12;
            		}
            		if (  (_hx_switch_0==HX_("story_mode",2d,63,e6,a4)) ){
HXLINE( 381)			::MusicBeatState_obj::switchState( ::StoryMenuState_obj::__alloc( HX_CTX ,null(),null()));
HXDLIN( 381)			goto _hx_goto_12;
            		}
            		_hx_goto_12:;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MainMenuState_obj,goToState,(void))

void MainMenuState_obj::hideit(Float time){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0,Float,time) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite spr){
            			HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_401_hideit)
HXLINE( 401)			::flixel::tweens::FlxTween_obj::tween(spr, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),((Float)0.0))),time, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_398_hideit)
HXLINE( 399)		this->menuItems->forEach( ::Dynamic(new _hx_Closure_0(time)),null());
HXLINE( 403)		::flixel::tweens::FlxTween_obj::tween(this->bg, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),0)),time, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
            	}


HX_DEFINE_DYNAMIC_FUNC1(MainMenuState_obj,hideit,(void))

void MainMenuState_obj::changeItem(::hx::Null< int >  __o_huh){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::MainMenuState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite spr){
            			HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_416_changeItem)
HXLINE( 417)			spr->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 418)			spr->updateHitbox();
HXLINE( 420)			if ((spr->ID == ::MainMenuState_obj::curSelected)) {
HXLINE( 422)				spr->animation->play(HX_("selected",5b,2a,6d,b1),null(),null(),null());
HXLINE( 423)				Float add = ( (Float)(0) );
HXLINE( 424)				if ((_gthis->menuItems->length > 4)) {
HXLINE( 426)					add = ( (Float)((_gthis->menuItems->length * 8)) );
            				}
HXLINE( 428)				 ::flixel::FlxObject _gthis1 = _gthis->camFollow;
HXDLIN( 428)				Float _hx_tmp = spr->getGraphicMidpoint(null())->x;
HXDLIN( 428)				_gthis1->setPosition(_hx_tmp,(spr->getGraphicMidpoint(null())->y - add));
HXLINE( 429)				spr->centerOffsets(null());
HXLINE( 431)				bool _hx_tmp1 = (::MainMenuState_obj::curSelected == 3);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		int huh = __o_huh.Default(0);
            	HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_407_changeItem)
HXLINE( 406)		 ::MainMenuState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 408)		 ::Dynamic _hx_tmp = ::hx::ClassOf< ::MainMenuState >();
HXDLIN( 408)		::MainMenuState_obj::curSelected = (::MainMenuState_obj::curSelected + huh);
HXLINE( 410)		if ((::MainMenuState_obj::curSelected >= this->menuItems->length)) {
HXLINE( 411)			::MainMenuState_obj::curSelected = 0;
            		}
HXLINE( 412)		if ((::MainMenuState_obj::curSelected < 0)) {
HXLINE( 413)			::MainMenuState_obj::curSelected = (this->menuItems->length - 1);
            		}
HXLINE( 415)		this->menuItems->forEach( ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(MainMenuState_obj,changeItem,(void))

void MainMenuState_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_445_beatHit)
HXLINE( 446)		this->super::beatHit();
HXLINE( 448)		if (::hx::IsNotNull( this->logoBl )) {
HXLINE( 449)			this->logoBl->animation->play(HX_("bump",f6,0f,20,41),true,null(),null());
            		}
            	}


::String MainMenuState_obj::psychEngineVersion;

int MainMenuState_obj::curSelected;

::String MainMenuState_obj::lastRoll;


::hx::ObjectPtr< MainMenuState_obj > MainMenuState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< MainMenuState_obj > __this = new MainMenuState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< MainMenuState_obj > MainMenuState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	MainMenuState_obj *__this = (MainMenuState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MainMenuState_obj), true, "MainMenuState"));
	*(void **)__this = MainMenuState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

MainMenuState_obj::MainMenuState_obj()
{
}

void MainMenuState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MainMenuState);
	HX_MARK_MEMBER_NAME(menuItems,"menuItems");
	HX_MARK_MEMBER_NAME(camGame,"camGame");
	HX_MARK_MEMBER_NAME(camAchievement,"camAchievement");
	HX_MARK_MEMBER_NAME(optionShit,"optionShit");
	HX_MARK_MEMBER_NAME(iconBG,"iconBG");
	HX_MARK_MEMBER_NAME(icon,"icon");
	HX_MARK_MEMBER_NAME(camFollow,"camFollow");
	HX_MARK_MEMBER_NAME(camFollowPos,"camFollowPos");
	HX_MARK_MEMBER_NAME(debugKeys,"debugKeys");
	HX_MARK_MEMBER_NAME(thisShit,"thisShit");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(logoBl,"logoBl");
	HX_MARK_MEMBER_NAME(selectedSomethin,"selectedSomethin");
	 ::flixel::addons::ui::FlxUIState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MainMenuState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(menuItems,"menuItems");
	HX_VISIT_MEMBER_NAME(camGame,"camGame");
	HX_VISIT_MEMBER_NAME(camAchievement,"camAchievement");
	HX_VISIT_MEMBER_NAME(optionShit,"optionShit");
	HX_VISIT_MEMBER_NAME(iconBG,"iconBG");
	HX_VISIT_MEMBER_NAME(icon,"icon");
	HX_VISIT_MEMBER_NAME(camFollow,"camFollow");
	HX_VISIT_MEMBER_NAME(camFollowPos,"camFollowPos");
	HX_VISIT_MEMBER_NAME(debugKeys,"debugKeys");
	HX_VISIT_MEMBER_NAME(thisShit,"thisShit");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(logoBl,"logoBl");
	HX_VISIT_MEMBER_NAME(selectedSomethin,"selectedSomethin");
	 ::flixel::addons::ui::FlxUIState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MainMenuState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"icon") ) { return ::hx::Val( icon ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"iconBG") ) { return ::hx::Val( iconBG ); }
		if (HX_FIELD_EQ(inName,"logoBl") ) { return ::hx::Val( logoBl ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"hideit") ) { return ::hx::Val( hideit_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"camGame") ) { return ::hx::Val( camGame ); }
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"thisShit") ) { return ::hx::Val( thisShit ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { return ::hx::Val( menuItems ); }
		if (HX_FIELD_EQ(inName,"camFollow") ) { return ::hx::Val( camFollow ); }
		if (HX_FIELD_EQ(inName,"debugKeys") ) { return ::hx::Val( debugKeys ); }
		if (HX_FIELD_EQ(inName,"goToState") ) { return ::hx::Val( goToState_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"optionShit") ) { return ::hx::Val( optionShit ); }
		if (HX_FIELD_EQ(inName,"changeItem") ) { return ::hx::Val( changeItem_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"camFollowPos") ) { return ::hx::Val( camFollowPos ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"camAchievement") ) { return ::hx::Val( camAchievement ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"giveAchievement") ) { return ::hx::Val( giveAchievement_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"selectedSomethin") ) { return ::hx::Val( selectedSomethin ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MainMenuState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"lastRoll") ) { outValue = ( lastRoll ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { outValue = ( curSelected ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"psychEngineVersion") ) { outValue = ( psychEngineVersion ); return true; }
	}
	return false;
}

::hx::Val MainMenuState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"icon") ) { icon=inValue.Cast<  ::HealthIcon >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"iconBG") ) { iconBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"logoBl") ) { logoBl=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"camGame") ) { camGame=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"thisShit") ) { thisShit=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { menuItems=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camFollow") ) { camFollow=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"debugKeys") ) { debugKeys=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"optionShit") ) { optionShit=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"camFollowPos") ) { camFollowPos=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"camAchievement") ) { camAchievement=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"selectedSomethin") ) { selectedSomethin=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MainMenuState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"lastRoll") ) { lastRoll=ioValue.Cast< ::String >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=ioValue.Cast< int >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"psychEngineVersion") ) { psychEngineVersion=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void MainMenuState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("menuItems",e1,15,e5,5c));
	outFields->push(HX_("camGame",a1,47,50,cf));
	outFields->push(HX_("camAchievement",a0,d0,67,f8));
	outFields->push(HX_("optionShit",d5,2d,ee,91));
	outFields->push(HX_("iconBG",7e,b1,d6,45));
	outFields->push(HX_("icon",79,e7,b2,45));
	outFields->push(HX_("camFollow",e0,6e,47,22));
	outFields->push(HX_("camFollowPos",94,32,de,8d));
	outFields->push(HX_("debugKeys",e7,85,52,2a));
	outFields->push(HX_("thisShit",3e,89,4d,39));
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("logoBl",15,ca,6e,5c));
	outFields->push(HX_("selectedSomethin",c8,ec,fb,99));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MainMenuState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(MainMenuState_obj,menuItems),HX_("menuItems",e1,15,e5,5c)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(MainMenuState_obj,camGame),HX_("camGame",a1,47,50,cf)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(MainMenuState_obj,camAchievement),HX_("camAchievement",a0,d0,67,f8)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(MainMenuState_obj,optionShit),HX_("optionShit",d5,2d,ee,91)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MainMenuState_obj,iconBG),HX_("iconBG",7e,b1,d6,45)},
	{::hx::fsObject /*  ::HealthIcon */ ,(int)offsetof(MainMenuState_obj,icon),HX_("icon",79,e7,b2,45)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(MainMenuState_obj,camFollow),HX_("camFollow",e0,6e,47,22)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(MainMenuState_obj,camFollowPos),HX_("camFollowPos",94,32,de,8d)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(MainMenuState_obj,debugKeys),HX_("debugKeys",e7,85,52,2a)},
	{::hx::fsBool,(int)offsetof(MainMenuState_obj,thisShit),HX_("thisShit",3e,89,4d,39)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MainMenuState_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MainMenuState_obj,logoBl),HX_("logoBl",15,ca,6e,5c)},
	{::hx::fsBool,(int)offsetof(MainMenuState_obj,selectedSomethin),HX_("selectedSomethin",c8,ec,fb,99)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo MainMenuState_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &MainMenuState_obj::psychEngineVersion,HX_("psychEngineVersion",3b,61,cc,fc)},
	{::hx::fsInt,(void *) &MainMenuState_obj::curSelected,HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsString,(void *) &MainMenuState_obj::lastRoll,HX_("lastRoll",f3,04,f8,de)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String MainMenuState_obj_sMemberFields[] = {
	HX_("menuItems",e1,15,e5,5c),
	HX_("camGame",a1,47,50,cf),
	HX_("camAchievement",a0,d0,67,f8),
	HX_("optionShit",d5,2d,ee,91),
	HX_("iconBG",7e,b1,d6,45),
	HX_("icon",79,e7,b2,45),
	HX_("camFollow",e0,6e,47,22),
	HX_("camFollowPos",94,32,de,8d),
	HX_("debugKeys",e7,85,52,2a),
	HX_("thisShit",3e,89,4d,39),
	HX_("bg",c5,55,00,00),
	HX_("logoBl",15,ca,6e,5c),
	HX_("create",fc,66,0f,7c),
	HX_("giveAchievement",1e,ea,83,24),
	HX_("selectedSomethin",c8,ec,fb,99),
	HX_("update",09,86,05,87),
	HX_("goToState",4e,a5,e1,c9),
	HX_("hideit",2d,c5,96,4c),
	HX_("changeItem",a3,fa,08,20),
	HX_("beatHit",7d,ea,04,74),
	::String(null()) };

static void MainMenuState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MainMenuState_obj::psychEngineVersion,"psychEngineVersion");
	HX_MARK_MEMBER_NAME(MainMenuState_obj::curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(MainMenuState_obj::lastRoll,"lastRoll");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MainMenuState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MainMenuState_obj::psychEngineVersion,"psychEngineVersion");
	HX_VISIT_MEMBER_NAME(MainMenuState_obj::curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(MainMenuState_obj::lastRoll,"lastRoll");
};

#endif

::hx::Class MainMenuState_obj::__mClass;

static ::String MainMenuState_obj_sStaticFields[] = {
	HX_("psychEngineVersion",3b,61,cc,fc),
	HX_("curSelected",fb,eb,ab,32),
	HX_("lastRoll",f3,04,f8,de),
	::String(null())
};

void MainMenuState_obj::__register()
{
	MainMenuState_obj _hx_dummy;
	MainMenuState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("MainMenuState",59,88,5e,20);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MainMenuState_obj::__GetStatic;
	__mClass->mSetStaticField = &MainMenuState_obj::__SetStatic;
	__mClass->mMarkFunc = MainMenuState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MainMenuState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MainMenuState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MainMenuState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MainMenuState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MainMenuState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MainMenuState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MainMenuState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_29_boot)
HXDLIN(  29)		psychEngineVersion = HX_("0.5.2h",8d,63,bb,d0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_30_boot)
HXDLIN(  30)		curSelected = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_47_boot)
HXDLIN(  47)		lastRoll = HX_("bf",c4,55,00,00);
            	}
}

