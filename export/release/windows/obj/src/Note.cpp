// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_ClientPrefs
#include <ClientPrefs.h>
#endif
#ifndef INCLUDED_ColorSwap
#include <ColorSwap.h>
#endif
#ifndef INCLUDED_ColorSwapShader
#include <ColorSwapShader.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Note
#include <Note.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_editors_ChartingState
#include <editors/ChartingState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxGraphicsShader
#include <flixel/graphics/tile/FlxGraphicsShader.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3be6f1ff2d789e96_21_new,"Note","new",0x1cc75604,"Note.new","Note.hx",21,0x1a8855ec)
static const ::String _hx_array_data_33e34412_1[] = {
	HX_("A",41,00,00,00),HX_("B",42,00,00,00),HX_("C",43,00,00,00),HX_("D",44,00,00,00),HX_("E",45,00,00,00),HX_("F",46,00,00,00),HX_("G",47,00,00,00),HX_("H",48,00,00,00),HX_("I",49,00,00,00),HX_("J",4a,00,00,00),HX_("K",4b,00,00,00),HX_("L",4c,00,00,00),HX_("M",4d,00,00,00),HX_("N",4e,00,00,00),HX_("O",4f,00,00,00),HX_("P",50,00,00,00),HX_("Q",51,00,00,00),HX_("R",52,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_3be6f1ff2d789e96_156_set_texture,"Note","set_texture",0x04eff9a2,"Note.set_texture","Note.hx",156,0x1a8855ec)
HX_LOCAL_STACK_FRAME(_hx_pos_3be6f1ff2d789e96_164_set_noteType,"Note","set_noteType",0x43779525,"Note.set_noteType","Note.hx",164,0x1a8855ec)
HX_LOCAL_STACK_FRAME(_hx_pos_3be6f1ff2d789e96_284_reloadNote,"Note","reloadNote",0x1599eec7,"Note.reloadNote","Note.hx",284,0x1a8855ec)
HX_LOCAL_STACK_FRAME(_hx_pos_3be6f1ff2d789e96_359_loadNoteAnims,"Note","loadNoteAnims",0x493f5f8e,"Note.loadNoteAnims","Note.hx",359,0x1a8855ec)
HX_LOCAL_STACK_FRAME(_hx_pos_3be6f1ff2d789e96_381_loadPixelNoteAnims,"Note","loadPixelNoteAnims",0xefd7042c,"Note.loadPixelNoteAnims","Note.hx",381,0x1a8855ec)
HX_LOCAL_STACK_FRAME(_hx_pos_3be6f1ff2d789e96_394_applyManiaChange,"Note","applyManiaChange",0x55131910,"Note.applyManiaChange","Note.hx",394,0x1a8855ec)
HX_LOCAL_STACK_FRAME(_hx_pos_3be6f1ff2d789e96_421_update,"Note","update",0xca3a1ee5,"Note.update","Note.hx",421,0x1a8855ec)
HX_LOCAL_STACK_FRAME(_hx_pos_3be6f1ff2d789e96_26_boot,"Note","boot",0x09bcee0e,"Note.boot","Note.hx",26,0x1a8855ec)
static const Float _hx_array_data_33e34412_14[] = {
	0.9,0.85,0.8,0.7,0.66,0.6,0.55,0.50,0.46,0.39,0.36,
};
HX_LOCAL_STACK_FRAME(_hx_pos_3be6f1ff2d789e96_27_boot,"Note","boot",0x09bcee0e,"Note.boot","Note.hx",27,0x1a8855ec)
static const int _hx_array_data_33e34412_16[] = {
	(int)0,(int)0,(int)0,(int)0,(int)0,(int)8,(int)7,(int)8,(int)8,(int)7,(int)6,
};
HX_LOCAL_STACK_FRAME(_hx_pos_3be6f1ff2d789e96_28_boot,"Note","boot",0x09bcee0e,"Note.boot","Note.hx",28,0x1a8855ec)
static const int _hx_array_data_33e34412_18[] = {
	(int)0,(int)0,(int)1,(int)1,(int)2,(int)2,(int)2,(int)3,(int)3,(int)4,(int)4,
};
HX_LOCAL_STACK_FRAME(_hx_pos_3be6f1ff2d789e96_29_boot,"Note","boot",0x09bcee0e,"Note.boot","Note.hx",29,0x1a8855ec)
static const int _hx_array_data_33e34412_20[] = {
	(int)150,(int)89,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_3be6f1ff2d789e96_30_boot,"Note","boot",0x09bcee0e,"Note.boot","Note.hx",30,0x1a8855ec)
static const int _hx_array_data_33e34412_22[] = {
	(int)0,(int)0,(int)0,(int)0,(int)25,(int)32,(int)46,(int)52,(int)60,(int)40,(int)30,
};
HX_LOCAL_STACK_FRAME(_hx_pos_3be6f1ff2d789e96_31_boot,"Note","boot",0x09bcee0e,"Note.boot","Note.hx",31,0x1a8855ec)
static const int _hx_array_data_33e34412_24[] = {
	(int)40,(int)40,(int)40,(int)40,(int)40,(int)40,(int)40,(int)40,(int)40,(int)35,(int)30,
};
HX_LOCAL_STACK_FRAME(_hx_pos_3be6f1ff2d789e96_32_boot,"Note","boot",0x09bcee0e,"Note.boot","Note.hx",32,0x1a8855ec)
HX_LOCAL_STACK_FRAME(_hx_pos_3be6f1ff2d789e96_47_boot,"Note","boot",0x09bcee0e,"Note.boot","Note.hx",47,0x1a8855ec)
HX_LOCAL_STACK_FRAME(_hx_pos_3be6f1ff2d789e96_48_boot,"Note","boot",0x09bcee0e,"Note.boot","Note.hx",48,0x1a8855ec)
HX_LOCAL_STACK_FRAME(_hx_pos_3be6f1ff2d789e96_49_boot,"Note","boot",0x09bcee0e,"Note.boot","Note.hx",49,0x1a8855ec)
HX_LOCAL_STACK_FRAME(_hx_pos_3be6f1ff2d789e96_51_boot,"Note","boot",0x09bcee0e,"Note.boot","Note.hx",51,0x1a8855ec)
HX_LOCAL_STACK_FRAME(_hx_pos_3be6f1ff2d789e96_79_boot,"Note","boot",0x09bcee0e,"Note.boot","Note.hx",79,0x1a8855ec)
static const int _hx_array_data_33e34412_32[] = {
	(int)1,(int)2,(int)3,(int)4,(int)5,(int)6,(int)7,(int)8,(int)9,(int)10,(int)11,
};
HX_LOCAL_STACK_FRAME(_hx_pos_3be6f1ff2d789e96_83_boot,"Note","boot",0x09bcee0e,"Note.boot","Note.hx",83,0x1a8855ec)
static const Float _hx_array_data_33e34412_34[] = {
	1.2,1.15,1.1,(Float)1,0.9,0.83,0.8,0.74,0.7,0.6,0.55,
};
HX_LOCAL_STACK_FRAME(_hx_pos_3be6f1ff2d789e96_111_boot,"Note","boot",0x09bcee0e,"Note.boot","Note.hx",111,0x1a8855ec)
HX_LOCAL_STACK_FRAME(_hx_pos_3be6f1ff2d789e96_112_boot,"Note","boot",0x09bcee0e,"Note.boot","Note.hx",112,0x1a8855ec)
HX_LOCAL_STACK_FRAME(_hx_pos_3be6f1ff2d789e96_113_boot,"Note","boot",0x09bcee0e,"Note.boot","Note.hx",113,0x1a8855ec)
HX_LOCAL_STACK_FRAME(_hx_pos_3be6f1ff2d789e96_114_boot,"Note","boot",0x09bcee0e,"Note.boot","Note.hx",114,0x1a8855ec)
HX_LOCAL_STACK_FRAME(_hx_pos_3be6f1ff2d789e96_115_boot,"Note","boot",0x09bcee0e,"Note.boot","Note.hx",115,0x1a8855ec)

void Note_obj::__construct(Float strumTime,int noteData, ::Note prevNote, ::Dynamic __o_sustainNote, ::Dynamic __o_inEditor){
            		 ::Dynamic sustainNote = __o_sustainNote;
            		if (::hx::IsNull(__o_sustainNote)) sustainNote = false;
            		 ::Dynamic inEditor = __o_inEditor;
            		if (::hx::IsNull(__o_inEditor)) inEditor = false;
            	HX_GC_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_21_new)
HXLINE( 283)		this->originalHeightForCalcs = ((Float)6);
HXLINE( 282)		this->lastNoteScaleToo = ((Float)1);
HXLINE( 281)		this->lastNoteOffsetXForPixelAutoAdjusting = ((Float)0);
HXLINE( 154)		this->defaultHeight = ((Float)0);
HXLINE( 153)		this->defaultWidth = ((Float)0);
HXLINE( 148)		this->mania = 1;
HXLINE( 146)		this->hitsoundDisabled = false;
HXLINE( 144)		this->distance = ((Float)2000);
HXLINE( 143)		this->hitCausesMiss = false;
HXLINE( 142)		this->noAnimation = false;
HXLINE( 140)		this->texture = null();
HXLINE( 138)		this->ratingDisabled = false;
HXLINE( 137)		this->ratingMod = ((Float)0);
HXLINE( 136)		this->rating = HX_("unknown",8a,23,7b,e1);
HXLINE( 135)		this->missHealth = ((Float)0.0475);
HXLINE( 134)		this->hitHealth = ((Float)0.023);
HXLINE( 132)		this->copyAlpha = true;
HXLINE( 131)		this->copyAngle = true;
HXLINE( 130)		this->copyY = true;
HXLINE( 129)		this->copyX = true;
HXLINE( 127)		this->multAlpha = ((Float)1);
HXLINE( 126)		this->offsetAngle = ((Float)0);
HXLINE( 125)		this->offsetY = ((Float)0);
HXLINE( 124)		this->offsetX = ((Float)0);
HXLINE( 122)		this->noteSplashBrt = ((Float)0);
HXLINE( 121)		this->noteSplashSat = ((Float)0);
HXLINE( 120)		this->noteSplashHue = ((Float)0);
HXLINE( 119)		this->noteSplashTexture = null();
HXLINE( 118)		this->noteSplashDisabled = false;
HXLINE( 109)		this->earlyHitMult = ((Float)0.5);
HXLINE( 108)		this->gfNote = false;
HXLINE( 107)		this->inEditor = false;
HXLINE( 104)		this->eventVal2 = HX_("",00,00,00,00);
HXLINE( 103)		this->eventVal1 = HX_("",00,00,00,00);
HXLINE( 102)		this->eventLength = 0;
HXLINE( 101)		this->eventName = HX_("",00,00,00,00);
HXLINE(  99)		this->noteType = null();
HXLINE(  98)		this->isSustainNote = false;
HXLINE(  97)		this->sustainLength = ((Float)0);
HXLINE(  94)		this->noteWasHit = false;
HXLINE(  93)		this->hitByOpponent = false;
HXLINE(  92)		this->ignoreNote = false;
HXLINE(  91)		this->wasGoodHit = false;
HXLINE(  90)		this->tooLate = false;
HXLINE(  89)		this->canBeHit = false;
HXLINE(  88)		this->noteData = 0;
HXLINE(  87)		this->mustPress = false;
HXLINE(  85)		this->strumTime = ((Float)0);
HXLINE(  23)		this->gfxLetter = ::Array_obj< ::String >::fromData( _hx_array_data_33e34412_1,18);
HXLINE( 200)		super::__construct(null(),null(),null());
HXLINE( 202)		this->mania = ::PlayState_obj::mania;
HXLINE( 204)		if (::hx::IsNull( prevNote )) {
HXLINE( 205)			prevNote = ::hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 207)		this->prevNote = prevNote;
HXLINE( 208)		this->isSustainNote = ( (bool)(sustainNote) );
HXLINE( 209)		this->inEditor = ( (bool)(inEditor) );
HXLINE( 211)		{
HXLINE( 211)			 ::Note _g = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 211)			int _hx_tmp;
HXDLIN( 211)			if (::ClientPrefs_obj::middleScroll) {
HXLINE( 211)				_hx_tmp = ::PlayState_obj::STRUM_X_MIDDLESCROLL;
            			}
            			else {
HXLINE( 211)				_hx_tmp = ::PlayState_obj::STRUM_X;
            			}
HXDLIN( 211)			_g->set_x((_g->x + (_hx_tmp + 50)));
            		}
HXLINE( 213)		{
HXLINE( 213)			 ::Note _g1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 213)			_g1->set_y((_g1->y - ( (Float)(2000) )));
            		}
HXLINE( 214)		this->strumTime = strumTime;
HXLINE( 215)		if (!(( (bool)(inEditor) ))) {
HXLINE( 215)			 ::Note _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 215)			_hx_tmp->strumTime = (_hx_tmp->strumTime + ::ClientPrefs_obj::noteOffset);
            		}
HXLINE( 217)		this->noteData = noteData;
HXLINE( 219)		if ((noteData > -1)) {
HXLINE( 220)			this->set_texture(HX_("",00,00,00,00));
HXLINE( 221)			this->colorSwap =  ::ColorSwap_obj::__alloc( HX_CTX );
HXLINE( 222)			this->shader = this->colorSwap->shader;
HXLINE( 224)			{
HXLINE( 224)				 ::Note _g = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 224)				_g->set_x((_g->x + (::Note_obj::swagWidth * ( (Float)(::hx::Mod(noteData,::Note_obj::ammo->__get(this->mania))) ))));
            			}
HXLINE( 225)			if (!(this->isSustainNote)) {
HXLINE( 226)				::String animToPlay = HX_("",00,00,00,00);
HXLINE( 227)				animToPlay = ( (::String)(( ( ::haxe::ds::StringMap)(::Note_obj::keysShit->get(this->mania)) )->get(HX_("letters",cd,9c,8e,04))->__GetItem(noteData)) );
HXLINE( 228)				this->animation->play(animToPlay,null(),null(),null());
            			}
            		}
HXLINE( 234)		bool _hx_tmp1;
HXDLIN( 234)		if (this->isSustainNote) {
HXLINE( 234)			_hx_tmp1 = ::hx::IsNotNull( prevNote );
            		}
            		else {
HXLINE( 234)			_hx_tmp1 = false;
            		}
HXDLIN( 234)		if (_hx_tmp1) {
HXLINE( 236)			this->set_alpha(((Float)0.6));
HXLINE( 237)			this->multAlpha = ((Float)0.6);
HXLINE( 238)			this->hitsoundDisabled = true;
HXLINE( 239)			if (::ClientPrefs_obj::downScroll) {
HXLINE( 239)				this->set_flipY(true);
            			}
HXLINE( 241)			 ::Note _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 241)			Float _hx_tmp1 = _hx_tmp->offsetX;
HXDLIN( 241)			_hx_tmp->offsetX = (_hx_tmp1 + (this->get_width() / ( (Float)(2) )));
HXLINE( 242)			this->copyAngle = false;
HXLINE( 244)			 ::flixel::animation::FlxAnimationController _hx_tmp2 = this->animation;
HXDLIN( 244)			_hx_tmp2->play((( ( ::haxe::ds::StringMap)(::Note_obj::keysShit->get(this->mania)) )->get(HX_("letters",cd,9c,8e,04))->__GetItem(noteData) + HX_(" tail",b0,46,c9,b9)),null(),null(),null());
HXLINE( 246)			this->updateHitbox();
HXLINE( 248)			 ::Note _hx_tmp3 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 248)			Float _hx_tmp4 = _hx_tmp3->offsetX;
HXDLIN( 248)			_hx_tmp3->offsetX = (_hx_tmp4 - (this->get_width() / ( (Float)(2) )));
HXLINE( 250)			if (::PlayState_obj::isPixelStage) {
HXLINE( 251)				 ::Note _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 251)				_hx_tmp->offsetX = (_hx_tmp->offsetX + (( (Float)(30) ) * ::Note_obj::pixelScales->__get(this->mania)));
            			}
HXLINE( 253)			if (prevNote->isSustainNote) {
HXLINE( 255)				 ::flixel::animation::FlxAnimationController prevNote1 = prevNote->animation;
HXDLIN( 255)				prevNote1->play((( ( ::haxe::ds::StringMap)(::Note_obj::keysShit->get(this->mania)) )->get(HX_("letters",cd,9c,8e,04))->__GetItem(prevNote->noteData) + HX_(" hold",5f,59,e5,b1)),null(),null(),null());
HXLINE( 257)				{
HXLINE( 257)					 ::flixel::math::FlxPoint _g = prevNote->scale;
HXDLIN( 257)					_g->set_y((_g->y * ((::Conductor_obj::stepCrochet / ( (Float)(100) )) * ((Float)1.05))));
            				}
HXLINE( 258)				if (::hx::IsNotNull( ::PlayState_obj::instance )) {
HXLINE( 260)					 ::flixel::math::FlxPoint _g = prevNote->scale;
HXDLIN( 260)					_g->set_y((_g->y * ::PlayState_obj::instance->songSpeed));
            				}
HXLINE( 263)				if (::PlayState_obj::isPixelStage) {
HXLINE( 264)					{
HXLINE( 264)						 ::flixel::math::FlxPoint _g = prevNote->scale;
HXDLIN( 264)						_g->set_y((_g->y * ((Float)1.19)));
            					}
HXLINE( 265)					{
HXLINE( 265)						 ::flixel::math::FlxPoint _g1 = prevNote->scale;
HXDLIN( 265)						Float _g2 = _g1->y;
HXDLIN( 265)						_g1->set_y((_g2 * (( (Float)(6) ) / this->get_height())));
            					}
            				}
HXLINE( 267)				prevNote->updateHitbox();
            			}
HXLINE( 271)			if (::PlayState_obj::isPixelStage) {
HXLINE( 272)				{
HXLINE( 272)					 ::flixel::math::FlxPoint _g = this->scale;
HXDLIN( 272)					_g->set_y((_g->y * ::PlayState_obj::daPixelZoom));
            				}
HXLINE( 273)				this->updateHitbox();
            			}
            		}
            		else {
HXLINE( 275)			if (!(this->isSustainNote)) {
HXLINE( 276)				this->earlyHitMult = ( (Float)(1) );
            			}
            		}
HXLINE( 278)		{
HXLINE( 278)			 ::Note _g2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 278)			_g2->set_x((_g2->x + this->offsetX));
            		}
            	}

Dynamic Note_obj::__CreateEmpty() { return new Note_obj; }

void *Note_obj::_hx_vtable = 0;

Dynamic Note_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Note_obj > _hx_result = new Note_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool Note_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c01639b) {
		if (inClassId<=(int)0x08363a36) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x08363a36;
		} else {
			return inClassId==(int)0x2c01639b;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

::String Note_obj::set_texture(::String value){
            	HX_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_156_set_texture)
HXLINE( 157)		if ((this->texture != value)) {
HXLINE( 158)			this->reloadNote(HX_("",00,00,00,00),value,null());
            		}
HXLINE( 160)		this->texture = value;
HXLINE( 161)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Note_obj,set_texture,return )

::String Note_obj::set_noteType(::String value){
            	HX_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_164_set_noteType)
HXLINE( 165)		this->noteSplashTexture = ( (::String)(::PlayState_obj::SONG->__Field(HX_("splashSkin",84,03,e1,a1),::hx::paccDynamic)) );
HXLINE( 166)		 ::ColorSwap _hx_tmp = this->colorSwap;
HXDLIN( 166)		::Array< ::Dynamic> _hx_tmp1 = ::ClientPrefs_obj::arrowHSV;
HXDLIN( 166)		Float _hx_tmp2 = ( (Float)(( ( ::haxe::ds::StringMap)(::Note_obj::keysShit->get(this->mania)) )->get(HX_("pixelAnimIndex",db,ff,1c,a8))->__GetItem(this->noteData)) );
HXDLIN( 166)		_hx_tmp->set_hue((( (Float)(_hx_tmp1->__get(::Std_obj::_hx_int(::hx::Mod(_hx_tmp2,::Note_obj::ammo->__get(this->mania)))).StaticCast< ::Array< int > >()->__get(0)) ) / ( (Float)(360) )));
HXLINE( 167)		 ::ColorSwap _hx_tmp3 = this->colorSwap;
HXDLIN( 167)		::Array< ::Dynamic> _hx_tmp4 = ::ClientPrefs_obj::arrowHSV;
HXDLIN( 167)		Float _hx_tmp5 = ( (Float)(( ( ::haxe::ds::StringMap)(::Note_obj::keysShit->get(this->mania)) )->get(HX_("pixelAnimIndex",db,ff,1c,a8))->__GetItem(this->noteData)) );
HXDLIN( 167)		_hx_tmp3->set_saturation((( (Float)(_hx_tmp4->__get(::Std_obj::_hx_int(::hx::Mod(_hx_tmp5,::Note_obj::ammo->__get(this->mania)))).StaticCast< ::Array< int > >()->__get(1)) ) / ( (Float)(100) )));
HXLINE( 168)		 ::ColorSwap _hx_tmp6 = this->colorSwap;
HXDLIN( 168)		::Array< ::Dynamic> _hx_tmp7 = ::ClientPrefs_obj::arrowHSV;
HXDLIN( 168)		Float _hx_tmp8 = ( (Float)(( ( ::haxe::ds::StringMap)(::Note_obj::keysShit->get(this->mania)) )->get(HX_("pixelAnimIndex",db,ff,1c,a8))->__GetItem(this->noteData)) );
HXDLIN( 168)		_hx_tmp6->set_brightness((( (Float)(_hx_tmp7->__get(::Std_obj::_hx_int(::hx::Mod(_hx_tmp8,::Note_obj::ammo->__get(this->mania)))).StaticCast< ::Array< int > >()->__get(2)) ) / ( (Float)(100) )));
HXLINE( 170)		bool _hx_tmp9;
HXDLIN( 170)		if ((this->noteData > -1)) {
HXLINE( 170)			_hx_tmp9 = (this->noteType != value);
            		}
            		else {
HXLINE( 170)			_hx_tmp9 = false;
            		}
HXDLIN( 170)		if (_hx_tmp9) {
HXLINE( 171)			::String _hx_switch_0 = value;
            			if (  (_hx_switch_0==HX_("GF Sing",10,84,6e,29)) ){
HXLINE( 188)				this->gfNote = true;
HXDLIN( 188)				goto _hx_goto_3;
            			}
            			if (  (_hx_switch_0==HX_("Hurt Note",a3,41,9e,fe)) ){
HXLINE( 173)				this->ignoreNote = this->mustPress;
HXLINE( 174)				this->reloadNote(HX_("HURT",0f,24,d8,2f),null(),null());
HXLINE( 175)				this->noteSplashTexture = HX_("HURTnoteSplashes",36,d6,ee,48);
HXLINE( 176)				this->colorSwap->set_hue(( (Float)(0) ));
HXLINE( 177)				this->colorSwap->set_saturation(( (Float)(0) ));
HXLINE( 178)				this->colorSwap->set_brightness(( (Float)(0) ));
HXLINE( 179)				if (this->isSustainNote) {
HXLINE( 180)					this->missHealth = ((Float)0.1);
            				}
            				else {
HXLINE( 182)					this->missHealth = ((Float)0.3);
            				}
HXLINE( 184)				this->hitCausesMiss = true;
HXLINE( 172)				goto _hx_goto_3;
            			}
            			if (  (_hx_switch_0==HX_("No Animation",65,b2,1a,df)) ){
HXLINE( 186)				this->noAnimation = true;
HXDLIN( 186)				goto _hx_goto_3;
            			}
            			_hx_goto_3:;
HXLINE( 190)			this->noteType = value;
            		}
HXLINE( 192)		this->noteSplashHue = this->colorSwap->hue;
HXLINE( 193)		this->noteSplashSat = this->colorSwap->saturation;
HXLINE( 194)		this->noteSplashBrt = this->colorSwap->brightness;
HXLINE( 195)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Note_obj,set_noteType,return )

void Note_obj::reloadNote(::String __o_prefix,::String __o_texture,::String __o_suffix){
            		::String prefix = __o_prefix;
            		if (::hx::IsNull(__o_prefix)) prefix = HX_("",00,00,00,00);
            		::String texture = __o_texture;
            		if (::hx::IsNull(__o_texture)) texture = HX_("",00,00,00,00);
            		::String suffix = __o_suffix;
            		if (::hx::IsNull(__o_suffix)) suffix = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_284_reloadNote)
HXLINE( 285)		if (::hx::IsNull( prefix )) {
HXLINE( 285)			prefix = HX_("",00,00,00,00);
            		}
HXLINE( 286)		if (::hx::IsNull( texture )) {
HXLINE( 286)			texture = HX_("",00,00,00,00);
            		}
HXLINE( 287)		if (::hx::IsNull( suffix )) {
HXLINE( 287)			suffix = HX_("",00,00,00,00);
            		}
HXLINE( 289)		::String skin = texture;
HXLINE( 290)		if ((texture.length < 1)) {
HXLINE( 291)			skin = ( (::String)(::PlayState_obj::SONG->__Field(HX_("arrowSkin",e6,d4,f8,07),::hx::paccDynamic)) );
HXLINE( 292)			bool _hx_tmp;
HXDLIN( 292)			if (::hx::IsNotNull( skin )) {
HXLINE( 292)				_hx_tmp = (skin.length < 1);
            			}
            			else {
HXLINE( 292)				_hx_tmp = true;
            			}
HXDLIN( 292)			if (_hx_tmp) {
HXLINE( 293)				skin = HX_("NOTE_assets",70,3c,09,f7);
            			}
            		}
HXLINE( 297)		::String animName = null();
HXLINE( 298)		if (::hx::IsNotNull( this->animation->_curAnim )) {
HXLINE( 299)			animName = this->animation->_curAnim->name;
            		}
HXLINE( 302)		::Array< ::String > arraySkin = skin.split(HX_("/",2f,00,00,00));
HXLINE( 303)		arraySkin[(arraySkin->length - 1)] = ((prefix + arraySkin->__get((arraySkin->length - 1))) + suffix);
HXLINE( 305)		Float lastScaleY = this->scale->y;
HXLINE( 306)		::String blahblah = arraySkin->join(HX_("/",2f,00,00,00));
HXLINE( 308)		this->defaultWidth = ( (Float)(157) );
HXLINE( 309)		this->defaultHeight = ( (Float)(154) );
HXLINE( 310)		if (::PlayState_obj::isPixelStage) {
HXLINE( 311)			if (this->isSustainNote) {
HXLINE( 312)				::String library = null();
HXDLIN( 312)				 ::flixel::graphics::FlxGraphic returnAsset = ::Paths_obj::returnGraphic(((HX_("pixelUI/",95,50,4f,7e) + blahblah) + HX_("ENDS",38,24,d7,2d)),library);
HXDLIN( 312)				this->loadGraphic(returnAsset,null(),null(),null(),null(),null());
HXLINE( 313)				this->set_width((this->get_width() / ( (Float)(18) )));
HXLINE( 314)				this->set_height((this->get_height() / ( (Float)(2) )));
HXLINE( 315)				this->originalHeightForCalcs = this->get_height();
HXLINE( 316)				::String library1 = null();
HXDLIN( 316)				 ::flixel::graphics::FlxGraphic returnAsset1 = ::Paths_obj::returnGraphic(((HX_("pixelUI/",95,50,4f,7e) + blahblah) + HX_("ENDS",38,24,d7,2d)),library1);
HXDLIN( 316)				int _hx_tmp = ::Math_obj::floor(this->get_width());
HXDLIN( 316)				this->loadGraphic(returnAsset1,true,_hx_tmp,::Math_obj::floor(this->get_height()),null(),null());
            			}
            			else {
HXLINE( 318)				::String library = null();
HXDLIN( 318)				 ::flixel::graphics::FlxGraphic returnAsset = ::Paths_obj::returnGraphic((HX_("pixelUI/",95,50,4f,7e) + blahblah),library);
HXDLIN( 318)				this->loadGraphic(returnAsset,null(),null(),null(),null(),null());
HXLINE( 319)				this->set_width((this->get_width() / ( (Float)(18) )));
HXLINE( 320)				this->set_height((this->get_height() / ( (Float)(5) )));
HXLINE( 321)				::String library1 = null();
HXDLIN( 321)				 ::flixel::graphics::FlxGraphic returnAsset1 = ::Paths_obj::returnGraphic((HX_("pixelUI/",95,50,4f,7e) + blahblah),library1);
HXDLIN( 321)				int _hx_tmp = ::Math_obj::floor(this->get_width());
HXDLIN( 321)				this->loadGraphic(returnAsset1,true,_hx_tmp,::Math_obj::floor(this->get_height()),null(),null());
            			}
HXLINE( 323)			this->defaultWidth = this->get_width();
HXLINE( 324)			Float _hx_tmp = this->get_width();
HXDLIN( 324)			this->setGraphicSize(::Std_obj::_hx_int(((_hx_tmp * ::PlayState_obj::daPixelZoom) * ::Note_obj::pixelScales->__get(this->mania))),null());
HXLINE( 325)			this->loadPixelNoteAnims();
HXLINE( 326)			this->set_antialiasing(false);
HXLINE( 328)			if (this->isSustainNote) {
HXLINE( 329)				 ::Note _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 329)				_hx_tmp->offsetX = (_hx_tmp->offsetX + this->lastNoteOffsetXForPixelAutoAdjusting);
HXLINE( 330)				Float _hx_tmp1 = (this->get_width() - ( (Float)(7) ));
HXDLIN( 330)				this->lastNoteOffsetXForPixelAutoAdjusting = (_hx_tmp1 * (::PlayState_obj::daPixelZoom / ( (Float)(2) )));
HXLINE( 331)				 ::Note _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 331)				_hx_tmp2->offsetX = (_hx_tmp2->offsetX - this->lastNoteOffsetXForPixelAutoAdjusting);
            			}
            		}
            		else {
HXLINE( 341)			::String library = null();
HXDLIN( 341)			 ::flixel::graphics::FlxGraphic imageLoaded = ::Paths_obj::returnGraphic(blahblah,null());
HXDLIN( 341)			bool xmlExists = false;
HXDLIN( 341)			if (::sys::FileSystem_obj::exists(::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + blahblah) + HX_(".xml",69,3e,c3,1e))))) {
HXLINE( 341)				xmlExists = true;
            			}
HXDLIN( 341)			 ::Dynamic _hx_tmp;
HXDLIN( 341)			if (::hx::IsNotNull( imageLoaded )) {
HXLINE( 341)				_hx_tmp = imageLoaded;
            			}
            			else {
HXLINE( 341)				 ::flixel::graphics::FlxGraphic returnAsset = ::Paths_obj::returnGraphic(blahblah,library);
HXDLIN( 341)				_hx_tmp = returnAsset;
            			}
HXDLIN( 341)			::String _hx_tmp1;
HXDLIN( 341)			if (xmlExists) {
HXLINE( 341)				_hx_tmp1 = ::sys::io::File_obj::getContent(::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + blahblah) + HX_(".xml",69,3e,c3,1e))));
            			}
            			else {
HXLINE( 341)				_hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + blahblah) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library);
            			}
HXDLIN( 341)			this->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,_hx_tmp1));
HXLINE( 342)			this->loadNoteAnims();
HXLINE( 343)			this->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
            		}
HXLINE( 345)		if (this->isSustainNote) {
HXLINE( 346)			this->scale->set_y(lastScaleY);
            		}
HXLINE( 348)		this->updateHitbox();
HXLINE( 350)		if (::hx::IsNotNull( animName )) {
HXLINE( 351)			this->animation->play(animName,true,null(),null());
            		}
HXLINE( 353)		if (this->inEditor) {
HXLINE( 354)			this->setGraphicSize(::editors::ChartingState_obj::GRID_SIZE,::editors::ChartingState_obj::GRID_SIZE);
HXLINE( 355)			this->updateHitbox();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Note_obj,reloadNote,(void))

void Note_obj::loadNoteAnims(){
            	HX_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_359_loadNoteAnims)
HXLINE( 360)		{
HXLINE( 360)			int _g = 0;
HXDLIN( 360)			int _g1 = this->gfxLetter->length;
HXDLIN( 360)			while((_g < _g1)){
HXLINE( 360)				_g = (_g + 1);
HXDLIN( 360)				int i = (_g - 1);
HXLINE( 362)				this->animation->addByPrefix(this->gfxLetter->__get(i),(this->gfxLetter->__get(i) + HX_("0",30,00,00,00)),null(),null(),null(),null());
HXLINE( 364)				if (this->isSustainNote) {
HXLINE( 366)					this->animation->addByPrefix((this->gfxLetter->__get(i) + HX_(" hold",5f,59,e5,b1)),(this->gfxLetter->__get(i) + HX_(" hold",5f,59,e5,b1)),null(),null(),null(),null());
HXLINE( 367)					this->animation->addByPrefix((this->gfxLetter->__get(i) + HX_(" tail",b0,46,c9,b9)),(this->gfxLetter->__get(i) + HX_(" tail",b0,46,c9,b9)),null(),null(),null(),null());
            				}
            			}
            		}
HXLINE( 371)		this->ogW = this->get_width();
HXLINE( 372)		this->ogH = this->get_height();
HXLINE( 373)		if (!(this->isSustainNote)) {
HXLINE( 374)			this->setGraphicSize(::Std_obj::_hx_int((this->defaultWidth * ::Note_obj::scales->__get(this->mania))),null());
            		}
            		else {
HXLINE( 376)			int _hx_tmp = ::Std_obj::_hx_int((this->defaultWidth * ::Note_obj::scales->__get(this->mania)));
HXDLIN( 376)			this->setGraphicSize(_hx_tmp,::Std_obj::_hx_int((this->defaultHeight * ::Note_obj::scales->__get(0))));
            		}
HXLINE( 377)		this->updateHitbox();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Note_obj,loadNoteAnims,(void))

void Note_obj::loadPixelNoteAnims(){
            	HX_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_381_loadPixelNoteAnims)
HXDLIN( 381)		if (this->isSustainNote) {
HXLINE( 382)			int _g = 0;
HXDLIN( 382)			int _g1 = this->gfxLetter->length;
HXDLIN( 382)			while((_g < _g1)){
HXLINE( 382)				_g = (_g + 1);
HXDLIN( 382)				int i = (_g - 1);
HXLINE( 383)				this->animation->add((this->gfxLetter->__get(i) + HX_(" hold",5f,59,e5,b1)),::Array_obj< int >::__new(1)->init(0,i),null(),null(),null(),null());
HXLINE( 384)				this->animation->add((this->gfxLetter->__get(i) + HX_(" tail",b0,46,c9,b9)),::Array_obj< int >::__new(1)->init(0,(i + 18)),null(),null(),null(),null());
            			}
            		}
            		else {
HXLINE( 387)			int _g = 0;
HXDLIN( 387)			int _g1 = this->gfxLetter->length;
HXDLIN( 387)			while((_g < _g1)){
HXLINE( 387)				_g = (_g + 1);
HXDLIN( 387)				int i = (_g - 1);
HXLINE( 388)				this->animation->add(this->gfxLetter->__get(i),::Array_obj< int >::__new(1)->init(0,(i + 18)),null(),null(),null(),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Note_obj,loadPixelNoteAnims,(void))

void Note_obj::applyManiaChange(){
            	HX_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_394_applyManiaChange)
HXLINE( 395)		if (this->isSustainNote) {
HXLINE( 396)			this->scale->set_y(( (Float)(1) ));
            		}
HXLINE( 397)		this->reloadNote(this->texture,null(),null());
HXLINE( 398)		if (this->isSustainNote) {
HXLINE( 399)			this->offsetX = (this->get_width() / ( (Float)(2) ));
            		}
HXLINE( 400)		if (!(this->isSustainNote)) {
HXLINE( 402)			::String animToPlay = HX_("",00,00,00,00);
HXLINE( 403)			animToPlay = ( (::String)(( ( ::haxe::ds::StringMap)(::Note_obj::keysShit->get(this->mania)) )->get(HX_("letters",cd,9c,8e,04))->__GetItem(this->noteData)) );
HXLINE( 404)			this->animation->play(animToPlay,null(),null(),null());
            		}
HXLINE( 407)		bool _hx_tmp;
HXDLIN( 407)		if (this->isSustainNote) {
HXLINE( 407)			_hx_tmp = ::hx::IsNotNull( this->prevNote );
            		}
            		else {
HXLINE( 407)			_hx_tmp = false;
            		}
HXDLIN( 407)		if (_hx_tmp) {
HXLINE( 409)			 ::flixel::animation::FlxAnimationController _hx_tmp = this->animation;
HXDLIN( 409)			_hx_tmp->play((( ( ::haxe::ds::StringMap)(::Note_obj::keysShit->get(this->mania)) )->get(HX_("letters",cd,9c,8e,04))->__GetItem(this->noteData) + HX_(" tail",b0,46,c9,b9)),null(),null(),null());
HXLINE( 410)			if (this->prevNote->isSustainNote) {
HXLINE( 412)				 ::flixel::animation::FlxAnimationController _hx_tmp = this->prevNote->animation;
HXDLIN( 412)				_hx_tmp->play((( ( ::haxe::ds::StringMap)(::Note_obj::keysShit->get(this->mania)) )->get(HX_("letters",cd,9c,8e,04))->__GetItem(this->noteData) + HX_(" hold",5f,59,e5,b1)),null(),null(),null());
HXLINE( 413)				this->prevNote->updateHitbox();
            			}
            		}
HXLINE( 417)		this->updateHitbox();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Note_obj,applyManiaChange,(void))

void Note_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_421_update)
HXLINE( 422)		this->super::update(elapsed);
HXLINE( 424)		this->mania = ::PlayState_obj::mania;
HXLINE( 426)		if (this->mustPress) {
HXLINE( 429)			bool _hx_tmp;
HXDLIN( 429)			if ((this->strumTime > (::Conductor_obj::songPosition - ::Conductor_obj::safeZoneOffset))) {
HXLINE( 429)				_hx_tmp = (this->strumTime < (::Conductor_obj::songPosition + (::Conductor_obj::safeZoneOffset * this->earlyHitMult)));
            			}
            			else {
HXLINE( 429)				_hx_tmp = false;
            			}
HXDLIN( 429)			if (_hx_tmp) {
HXLINE( 431)				this->canBeHit = true;
            			}
            			else {
HXLINE( 433)				this->canBeHit = false;
            			}
HXLINE( 435)			bool _hx_tmp1;
HXDLIN( 435)			if ((this->strumTime < (::Conductor_obj::songPosition - ::Conductor_obj::safeZoneOffset))) {
HXLINE( 435)				_hx_tmp1 = !(this->wasGoodHit);
            			}
            			else {
HXLINE( 435)				_hx_tmp1 = false;
            			}
HXDLIN( 435)			if (_hx_tmp1) {
HXLINE( 436)				this->tooLate = true;
            			}
            		}
            		else {
HXLINE( 440)			this->canBeHit = false;
HXLINE( 442)			if ((this->strumTime < (::Conductor_obj::songPosition + (::Conductor_obj::safeZoneOffset * this->earlyHitMult)))) {
HXLINE( 444)				bool _hx_tmp;
HXDLIN( 444)				bool _hx_tmp1;
HXDLIN( 444)				if (this->isSustainNote) {
HXLINE( 444)					_hx_tmp1 = this->prevNote->wasGoodHit;
            				}
            				else {
HXLINE( 444)					_hx_tmp1 = false;
            				}
HXDLIN( 444)				if (!(_hx_tmp1)) {
HXLINE( 444)					_hx_tmp = (this->strumTime <= ::Conductor_obj::songPosition);
            				}
            				else {
HXLINE( 444)					_hx_tmp = true;
            				}
HXDLIN( 444)				if (_hx_tmp) {
HXLINE( 445)					this->wasGoodHit = true;
            				}
            			}
            		}
HXLINE( 449)		bool _hx_tmp;
HXDLIN( 449)		if (this->tooLate) {
HXLINE( 449)			_hx_tmp = !(this->inEditor);
            		}
            		else {
HXLINE( 449)			_hx_tmp = false;
            		}
HXDLIN( 449)		if (_hx_tmp) {
HXLINE( 451)			if ((this->alpha > ((Float)0.3))) {
HXLINE( 452)				this->set_alpha(((Float)0.3));
            			}
            		}
            	}


::Array< Float > Note_obj::scales;

::Array< int > Note_obj::lessX;

::Array< int > Note_obj::separator;

::Array< int > Note_obj::xtra;

::Array< int > Note_obj::posRest;

::Array< int > Note_obj::gridSizes;

::cpp::VirtualArray Note_obj::offsets;

int Note_obj::minMania;

int Note_obj::maxMania;

int Note_obj::defaultMania;

 ::haxe::ds::IntMap Note_obj::keysShit;

::Array< int > Note_obj::ammo;

::Array< Float > Note_obj::pixelScales;

Float Note_obj::swagWidth;

int Note_obj::PURP_NOTE;

int Note_obj::GREEN_NOTE;

int Note_obj::BLUE_NOTE;

int Note_obj::RED_NOTE;


::hx::ObjectPtr< Note_obj > Note_obj::__new(Float strumTime,int noteData, ::Note prevNote, ::Dynamic __o_sustainNote, ::Dynamic __o_inEditor) {
	::hx::ObjectPtr< Note_obj > __this = new Note_obj();
	__this->__construct(strumTime,noteData,prevNote,__o_sustainNote,__o_inEditor);
	return __this;
}

::hx::ObjectPtr< Note_obj > Note_obj::__alloc(::hx::Ctx *_hx_ctx,Float strumTime,int noteData, ::Note prevNote, ::Dynamic __o_sustainNote, ::Dynamic __o_inEditor) {
	Note_obj *__this = (Note_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Note_obj), true, "Note"));
	*(void **)__this = Note_obj::_hx_vtable;
	__this->__construct(strumTime,noteData,prevNote,__o_sustainNote,__o_inEditor);
	return __this;
}

Note_obj::Note_obj()
{
}

void Note_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Note);
	HX_MARK_MEMBER_NAME(gfxLetter,"gfxLetter");
	HX_MARK_MEMBER_NAME(strumTime,"strumTime");
	HX_MARK_MEMBER_NAME(mustPress,"mustPress");
	HX_MARK_MEMBER_NAME(noteData,"noteData");
	HX_MARK_MEMBER_NAME(canBeHit,"canBeHit");
	HX_MARK_MEMBER_NAME(tooLate,"tooLate");
	HX_MARK_MEMBER_NAME(wasGoodHit,"wasGoodHit");
	HX_MARK_MEMBER_NAME(ignoreNote,"ignoreNote");
	HX_MARK_MEMBER_NAME(hitByOpponent,"hitByOpponent");
	HX_MARK_MEMBER_NAME(noteWasHit,"noteWasHit");
	HX_MARK_MEMBER_NAME(prevNote,"prevNote");
	HX_MARK_MEMBER_NAME(sustainLength,"sustainLength");
	HX_MARK_MEMBER_NAME(isSustainNote,"isSustainNote");
	HX_MARK_MEMBER_NAME(noteType,"noteType");
	HX_MARK_MEMBER_NAME(eventName,"eventName");
	HX_MARK_MEMBER_NAME(eventLength,"eventLength");
	HX_MARK_MEMBER_NAME(eventVal1,"eventVal1");
	HX_MARK_MEMBER_NAME(eventVal2,"eventVal2");
	HX_MARK_MEMBER_NAME(colorSwap,"colorSwap");
	HX_MARK_MEMBER_NAME(inEditor,"inEditor");
	HX_MARK_MEMBER_NAME(gfNote,"gfNote");
	HX_MARK_MEMBER_NAME(earlyHitMult,"earlyHitMult");
	HX_MARK_MEMBER_NAME(noteSplashDisabled,"noteSplashDisabled");
	HX_MARK_MEMBER_NAME(noteSplashTexture,"noteSplashTexture");
	HX_MARK_MEMBER_NAME(noteSplashHue,"noteSplashHue");
	HX_MARK_MEMBER_NAME(noteSplashSat,"noteSplashSat");
	HX_MARK_MEMBER_NAME(noteSplashBrt,"noteSplashBrt");
	HX_MARK_MEMBER_NAME(offsetX,"offsetX");
	HX_MARK_MEMBER_NAME(offsetY,"offsetY");
	HX_MARK_MEMBER_NAME(offsetAngle,"offsetAngle");
	HX_MARK_MEMBER_NAME(multAlpha,"multAlpha");
	HX_MARK_MEMBER_NAME(copyX,"copyX");
	HX_MARK_MEMBER_NAME(copyY,"copyY");
	HX_MARK_MEMBER_NAME(copyAngle,"copyAngle");
	HX_MARK_MEMBER_NAME(copyAlpha,"copyAlpha");
	HX_MARK_MEMBER_NAME(hitHealth,"hitHealth");
	HX_MARK_MEMBER_NAME(missHealth,"missHealth");
	HX_MARK_MEMBER_NAME(rating,"rating");
	HX_MARK_MEMBER_NAME(ratingMod,"ratingMod");
	HX_MARK_MEMBER_NAME(ratingDisabled,"ratingDisabled");
	HX_MARK_MEMBER_NAME(texture,"texture");
	HX_MARK_MEMBER_NAME(noAnimation,"noAnimation");
	HX_MARK_MEMBER_NAME(hitCausesMiss,"hitCausesMiss");
	HX_MARK_MEMBER_NAME(distance,"distance");
	HX_MARK_MEMBER_NAME(hitsoundDisabled,"hitsoundDisabled");
	HX_MARK_MEMBER_NAME(mania,"mania");
	HX_MARK_MEMBER_NAME(ogW,"ogW");
	HX_MARK_MEMBER_NAME(ogH,"ogH");
	HX_MARK_MEMBER_NAME(defaultWidth,"defaultWidth");
	HX_MARK_MEMBER_NAME(defaultHeight,"defaultHeight");
	HX_MARK_MEMBER_NAME(lastNoteOffsetXForPixelAutoAdjusting,"lastNoteOffsetXForPixelAutoAdjusting");
	HX_MARK_MEMBER_NAME(lastNoteScaleToo,"lastNoteScaleToo");
	HX_MARK_MEMBER_NAME(originalHeightForCalcs,"originalHeightForCalcs");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Note_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(gfxLetter,"gfxLetter");
	HX_VISIT_MEMBER_NAME(strumTime,"strumTime");
	HX_VISIT_MEMBER_NAME(mustPress,"mustPress");
	HX_VISIT_MEMBER_NAME(noteData,"noteData");
	HX_VISIT_MEMBER_NAME(canBeHit,"canBeHit");
	HX_VISIT_MEMBER_NAME(tooLate,"tooLate");
	HX_VISIT_MEMBER_NAME(wasGoodHit,"wasGoodHit");
	HX_VISIT_MEMBER_NAME(ignoreNote,"ignoreNote");
	HX_VISIT_MEMBER_NAME(hitByOpponent,"hitByOpponent");
	HX_VISIT_MEMBER_NAME(noteWasHit,"noteWasHit");
	HX_VISIT_MEMBER_NAME(prevNote,"prevNote");
	HX_VISIT_MEMBER_NAME(sustainLength,"sustainLength");
	HX_VISIT_MEMBER_NAME(isSustainNote,"isSustainNote");
	HX_VISIT_MEMBER_NAME(noteType,"noteType");
	HX_VISIT_MEMBER_NAME(eventName,"eventName");
	HX_VISIT_MEMBER_NAME(eventLength,"eventLength");
	HX_VISIT_MEMBER_NAME(eventVal1,"eventVal1");
	HX_VISIT_MEMBER_NAME(eventVal2,"eventVal2");
	HX_VISIT_MEMBER_NAME(colorSwap,"colorSwap");
	HX_VISIT_MEMBER_NAME(inEditor,"inEditor");
	HX_VISIT_MEMBER_NAME(gfNote,"gfNote");
	HX_VISIT_MEMBER_NAME(earlyHitMult,"earlyHitMult");
	HX_VISIT_MEMBER_NAME(noteSplashDisabled,"noteSplashDisabled");
	HX_VISIT_MEMBER_NAME(noteSplashTexture,"noteSplashTexture");
	HX_VISIT_MEMBER_NAME(noteSplashHue,"noteSplashHue");
	HX_VISIT_MEMBER_NAME(noteSplashSat,"noteSplashSat");
	HX_VISIT_MEMBER_NAME(noteSplashBrt,"noteSplashBrt");
	HX_VISIT_MEMBER_NAME(offsetX,"offsetX");
	HX_VISIT_MEMBER_NAME(offsetY,"offsetY");
	HX_VISIT_MEMBER_NAME(offsetAngle,"offsetAngle");
	HX_VISIT_MEMBER_NAME(multAlpha,"multAlpha");
	HX_VISIT_MEMBER_NAME(copyX,"copyX");
	HX_VISIT_MEMBER_NAME(copyY,"copyY");
	HX_VISIT_MEMBER_NAME(copyAngle,"copyAngle");
	HX_VISIT_MEMBER_NAME(copyAlpha,"copyAlpha");
	HX_VISIT_MEMBER_NAME(hitHealth,"hitHealth");
	HX_VISIT_MEMBER_NAME(missHealth,"missHealth");
	HX_VISIT_MEMBER_NAME(rating,"rating");
	HX_VISIT_MEMBER_NAME(ratingMod,"ratingMod");
	HX_VISIT_MEMBER_NAME(ratingDisabled,"ratingDisabled");
	HX_VISIT_MEMBER_NAME(texture,"texture");
	HX_VISIT_MEMBER_NAME(noAnimation,"noAnimation");
	HX_VISIT_MEMBER_NAME(hitCausesMiss,"hitCausesMiss");
	HX_VISIT_MEMBER_NAME(distance,"distance");
	HX_VISIT_MEMBER_NAME(hitsoundDisabled,"hitsoundDisabled");
	HX_VISIT_MEMBER_NAME(mania,"mania");
	HX_VISIT_MEMBER_NAME(ogW,"ogW");
	HX_VISIT_MEMBER_NAME(ogH,"ogH");
	HX_VISIT_MEMBER_NAME(defaultWidth,"defaultWidth");
	HX_VISIT_MEMBER_NAME(defaultHeight,"defaultHeight");
	HX_VISIT_MEMBER_NAME(lastNoteOffsetXForPixelAutoAdjusting,"lastNoteOffsetXForPixelAutoAdjusting");
	HX_VISIT_MEMBER_NAME(lastNoteScaleToo,"lastNoteScaleToo");
	HX_VISIT_MEMBER_NAME(originalHeightForCalcs,"originalHeightForCalcs");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Note_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"ogW") ) { return ::hx::Val( ogW ); }
		if (HX_FIELD_EQ(inName,"ogH") ) { return ::hx::Val( ogH ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"copyX") ) { return ::hx::Val( copyX ); }
		if (HX_FIELD_EQ(inName,"copyY") ) { return ::hx::Val( copyY ); }
		if (HX_FIELD_EQ(inName,"mania") ) { return ::hx::Val( mania ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"gfNote") ) { return ::hx::Val( gfNote ); }
		if (HX_FIELD_EQ(inName,"rating") ) { return ::hx::Val( rating ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"tooLate") ) { return ::hx::Val( tooLate ); }
		if (HX_FIELD_EQ(inName,"offsetX") ) { return ::hx::Val( offsetX ); }
		if (HX_FIELD_EQ(inName,"offsetY") ) { return ::hx::Val( offsetY ); }
		if (HX_FIELD_EQ(inName,"texture") ) { return ::hx::Val( texture ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"noteData") ) { return ::hx::Val( noteData ); }
		if (HX_FIELD_EQ(inName,"canBeHit") ) { return ::hx::Val( canBeHit ); }
		if (HX_FIELD_EQ(inName,"prevNote") ) { return ::hx::Val( prevNote ); }
		if (HX_FIELD_EQ(inName,"noteType") ) { return ::hx::Val( noteType ); }
		if (HX_FIELD_EQ(inName,"inEditor") ) { return ::hx::Val( inEditor ); }
		if (HX_FIELD_EQ(inName,"distance") ) { return ::hx::Val( distance ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"gfxLetter") ) { return ::hx::Val( gfxLetter ); }
		if (HX_FIELD_EQ(inName,"strumTime") ) { return ::hx::Val( strumTime ); }
		if (HX_FIELD_EQ(inName,"mustPress") ) { return ::hx::Val( mustPress ); }
		if (HX_FIELD_EQ(inName,"eventName") ) { return ::hx::Val( eventName ); }
		if (HX_FIELD_EQ(inName,"eventVal1") ) { return ::hx::Val( eventVal1 ); }
		if (HX_FIELD_EQ(inName,"eventVal2") ) { return ::hx::Val( eventVal2 ); }
		if (HX_FIELD_EQ(inName,"colorSwap") ) { return ::hx::Val( colorSwap ); }
		if (HX_FIELD_EQ(inName,"multAlpha") ) { return ::hx::Val( multAlpha ); }
		if (HX_FIELD_EQ(inName,"copyAngle") ) { return ::hx::Val( copyAngle ); }
		if (HX_FIELD_EQ(inName,"copyAlpha") ) { return ::hx::Val( copyAlpha ); }
		if (HX_FIELD_EQ(inName,"hitHealth") ) { return ::hx::Val( hitHealth ); }
		if (HX_FIELD_EQ(inName,"ratingMod") ) { return ::hx::Val( ratingMod ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"wasGoodHit") ) { return ::hx::Val( wasGoodHit ); }
		if (HX_FIELD_EQ(inName,"ignoreNote") ) { return ::hx::Val( ignoreNote ); }
		if (HX_FIELD_EQ(inName,"noteWasHit") ) { return ::hx::Val( noteWasHit ); }
		if (HX_FIELD_EQ(inName,"missHealth") ) { return ::hx::Val( missHealth ); }
		if (HX_FIELD_EQ(inName,"reloadNote") ) { return ::hx::Val( reloadNote_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"eventLength") ) { return ::hx::Val( eventLength ); }
		if (HX_FIELD_EQ(inName,"offsetAngle") ) { return ::hx::Val( offsetAngle ); }
		if (HX_FIELD_EQ(inName,"noAnimation") ) { return ::hx::Val( noAnimation ); }
		if (HX_FIELD_EQ(inName,"set_texture") ) { return ::hx::Val( set_texture_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"earlyHitMult") ) { return ::hx::Val( earlyHitMult ); }
		if (HX_FIELD_EQ(inName,"defaultWidth") ) { return ::hx::Val( defaultWidth ); }
		if (HX_FIELD_EQ(inName,"set_noteType") ) { return ::hx::Val( set_noteType_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"hitByOpponent") ) { return ::hx::Val( hitByOpponent ); }
		if (HX_FIELD_EQ(inName,"sustainLength") ) { return ::hx::Val( sustainLength ); }
		if (HX_FIELD_EQ(inName,"isSustainNote") ) { return ::hx::Val( isSustainNote ); }
		if (HX_FIELD_EQ(inName,"noteSplashHue") ) { return ::hx::Val( noteSplashHue ); }
		if (HX_FIELD_EQ(inName,"noteSplashSat") ) { return ::hx::Val( noteSplashSat ); }
		if (HX_FIELD_EQ(inName,"noteSplashBrt") ) { return ::hx::Val( noteSplashBrt ); }
		if (HX_FIELD_EQ(inName,"hitCausesMiss") ) { return ::hx::Val( hitCausesMiss ); }
		if (HX_FIELD_EQ(inName,"defaultHeight") ) { return ::hx::Val( defaultHeight ); }
		if (HX_FIELD_EQ(inName,"loadNoteAnims") ) { return ::hx::Val( loadNoteAnims_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"ratingDisabled") ) { return ::hx::Val( ratingDisabled ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"hitsoundDisabled") ) { return ::hx::Val( hitsoundDisabled ); }
		if (HX_FIELD_EQ(inName,"lastNoteScaleToo") ) { return ::hx::Val( lastNoteScaleToo ); }
		if (HX_FIELD_EQ(inName,"applyManiaChange") ) { return ::hx::Val( applyManiaChange_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"noteSplashTexture") ) { return ::hx::Val( noteSplashTexture ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"noteSplashDisabled") ) { return ::hx::Val( noteSplashDisabled ); }
		if (HX_FIELD_EQ(inName,"loadPixelNoteAnims") ) { return ::hx::Val( loadPixelNoteAnims_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"originalHeightForCalcs") ) { return ::hx::Val( originalHeightForCalcs ); }
		break;
	case 36:
		if (HX_FIELD_EQ(inName,"lastNoteOffsetXForPixelAutoAdjusting") ) { return ::hx::Val( lastNoteOffsetXForPixelAutoAdjusting ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Note_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"xtra") ) { outValue = ( xtra ); return true; }
		if (HX_FIELD_EQ(inName,"ammo") ) { outValue = ( ammo ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"lessX") ) { outValue = ( lessX ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"scales") ) { outValue = ( scales ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"posRest") ) { outValue = ( posRest ); return true; }
		if (HX_FIELD_EQ(inName,"offsets") ) { outValue = ( offsets ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"minMania") ) { outValue = ( minMania ); return true; }
		if (HX_FIELD_EQ(inName,"maxMania") ) { outValue = ( maxMania ); return true; }
		if (HX_FIELD_EQ(inName,"keysShit") ) { outValue = ( keysShit ); return true; }
		if (HX_FIELD_EQ(inName,"RED_NOTE") ) { outValue = ( RED_NOTE ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"separator") ) { outValue = ( separator ); return true; }
		if (HX_FIELD_EQ(inName,"gridSizes") ) { outValue = ( gridSizes ); return true; }
		if (HX_FIELD_EQ(inName,"swagWidth") ) { outValue = ( swagWidth ); return true; }
		if (HX_FIELD_EQ(inName,"PURP_NOTE") ) { outValue = ( PURP_NOTE ); return true; }
		if (HX_FIELD_EQ(inName,"BLUE_NOTE") ) { outValue = ( BLUE_NOTE ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"GREEN_NOTE") ) { outValue = ( GREEN_NOTE ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"pixelScales") ) { outValue = ( pixelScales ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"defaultMania") ) { outValue = ( defaultMania ); return true; }
	}
	return false;
}

::hx::Val Note_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"ogW") ) { ogW=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ogH") ) { ogH=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"copyX") ) { copyX=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"copyY") ) { copyY=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mania") ) { mania=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"gfNote") ) { gfNote=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rating") ) { rating=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"tooLate") ) { tooLate=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offsetX") ) { offsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offsetY") ) { offsetY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"texture") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_texture(inValue.Cast< ::String >()) );texture=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"noteData") ) { noteData=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canBeHit") ) { canBeHit=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"prevNote") ) { prevNote=inValue.Cast<  ::Note >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noteType") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_noteType(inValue.Cast< ::String >()) );noteType=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inEditor") ) { inEditor=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"distance") ) { distance=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"gfxLetter") ) { gfxLetter=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strumTime") ) { strumTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mustPress") ) { mustPress=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventName") ) { eventName=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventVal1") ) { eventVal1=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventVal2") ) { eventVal2=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"colorSwap") ) { colorSwap=inValue.Cast<  ::ColorSwap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"multAlpha") ) { multAlpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"copyAngle") ) { copyAngle=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"copyAlpha") ) { copyAlpha=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hitHealth") ) { hitHealth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ratingMod") ) { ratingMod=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"wasGoodHit") ) { wasGoodHit=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ignoreNote") ) { ignoreNote=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noteWasHit") ) { noteWasHit=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"missHealth") ) { missHealth=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"eventLength") ) { eventLength=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offsetAngle") ) { offsetAngle=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noAnimation") ) { noAnimation=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"earlyHitMult") ) { earlyHitMult=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"defaultWidth") ) { defaultWidth=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"hitByOpponent") ) { hitByOpponent=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sustainLength") ) { sustainLength=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isSustainNote") ) { isSustainNote=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noteSplashHue") ) { noteSplashHue=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noteSplashSat") ) { noteSplashSat=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noteSplashBrt") ) { noteSplashBrt=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hitCausesMiss") ) { hitCausesMiss=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"defaultHeight") ) { defaultHeight=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"ratingDisabled") ) { ratingDisabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"hitsoundDisabled") ) { hitsoundDisabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastNoteScaleToo") ) { lastNoteScaleToo=inValue.Cast< Float >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"noteSplashTexture") ) { noteSplashTexture=inValue.Cast< ::String >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"noteSplashDisabled") ) { noteSplashDisabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"originalHeightForCalcs") ) { originalHeightForCalcs=inValue.Cast< Float >(); return inValue; }
		break;
	case 36:
		if (HX_FIELD_EQ(inName,"lastNoteOffsetXForPixelAutoAdjusting") ) { lastNoteOffsetXForPixelAutoAdjusting=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Note_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"xtra") ) { xtra=ioValue.Cast< ::Array< int > >(); return true; }
		if (HX_FIELD_EQ(inName,"ammo") ) { ammo=ioValue.Cast< ::Array< int > >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"lessX") ) { lessX=ioValue.Cast< ::Array< int > >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"scales") ) { scales=ioValue.Cast< ::Array< Float > >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"posRest") ) { posRest=ioValue.Cast< ::Array< int > >(); return true; }
		if (HX_FIELD_EQ(inName,"offsets") ) { offsets=ioValue.Cast< ::cpp::VirtualArray >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"minMania") ) { minMania=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"maxMania") ) { maxMania=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"keysShit") ) { keysShit=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
		if (HX_FIELD_EQ(inName,"RED_NOTE") ) { RED_NOTE=ioValue.Cast< int >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"separator") ) { separator=ioValue.Cast< ::Array< int > >(); return true; }
		if (HX_FIELD_EQ(inName,"gridSizes") ) { gridSizes=ioValue.Cast< ::Array< int > >(); return true; }
		if (HX_FIELD_EQ(inName,"swagWidth") ) { swagWidth=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"PURP_NOTE") ) { PURP_NOTE=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"BLUE_NOTE") ) { BLUE_NOTE=ioValue.Cast< int >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"GREEN_NOTE") ) { GREEN_NOTE=ioValue.Cast< int >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"pixelScales") ) { pixelScales=ioValue.Cast< ::Array< Float > >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"defaultMania") ) { defaultMania=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void Note_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("gfxLetter",3f,83,e7,fe));
	outFields->push(HX_("strumTime",f6,2d,21,f4));
	outFields->push(HX_("mustPress",ba,d4,17,60));
	outFields->push(HX_("noteData",3c,7b,96,51));
	outFields->push(HX_("canBeHit",20,a6,d1,1e));
	outFields->push(HX_("tooLate",da,77,57,55));
	outFields->push(HX_("wasGoodHit",ed,7a,9b,17));
	outFields->push(HX_("ignoreNote",24,ee,32,49));
	outFields->push(HX_("hitByOpponent",c7,8a,37,cc));
	outFields->push(HX_("noteWasHit",3c,ca,a4,58));
	outFields->push(HX_("prevNote",85,f8,d7,11));
	outFields->push(HX_("sustainLength",e9,a1,9c,7c));
	outFields->push(HX_("isSustainNote",6b,1e,77,c3));
	outFields->push(HX_("noteType",cc,17,3c,5c));
	outFields->push(HX_("eventName",85,7b,0c,f8));
	outFields->push(HX_("eventLength",a0,e0,54,f2));
	outFields->push(HX_("eventVal1",6a,2f,56,fd));
	outFields->push(HX_("eventVal2",6b,2f,56,fd));
	outFields->push(HX_("colorSwap",96,b5,cb,27));
	outFields->push(HX_("inEditor",72,8b,5b,c4));
	outFields->push(HX_("gfNote",b1,99,84,1d));
	outFields->push(HX_("earlyHitMult",80,a9,e2,17));
	outFields->push(HX_("noteSplashDisabled",95,ad,6f,54));
	outFields->push(HX_("noteSplashTexture",e2,22,64,f9));
	outFields->push(HX_("noteSplashHue",3f,5b,ed,f6));
	outFields->push(HX_("noteSplashSat",ad,a2,f5,f6));
	outFields->push(HX_("noteSplashBrt",2b,cb,e8,f6));
	outFields->push(HX_("offsetX",65,09,65,d7));
	outFields->push(HX_("offsetY",66,09,65,d7));
	outFields->push(HX_("offsetAngle",40,c7,62,bb));
	outFields->push(HX_("multAlpha",4e,e9,0f,96));
	outFields->push(HX_("copyX",03,83,5f,4a));
	outFields->push(HX_("copyY",04,83,5f,4a));
	outFields->push(HX_("copyAngle",de,67,dd,a8));
	outFields->push(HX_("copyAlpha",69,cb,91,a7));
	outFields->push(HX_("hitHealth",4f,e3,17,31));
	outFields->push(HX_("missHealth",b8,54,21,f6));
	outFields->push(HX_("rating",1d,34,8a,bb));
	outFields->push(HX_("ratingMod",a5,4a,34,09));
	outFields->push(HX_("ratingDisabled",b9,16,ed,99));
	outFields->push(HX_("texture",db,c8,e0,9e));
	outFields->push(HX_("noAnimation",83,de,e3,ac));
	outFields->push(HX_("hitCausesMiss",39,dc,fd,91));
	outFields->push(HX_("distance",35,93,f9,6b));
	outFields->push(HX_("hitsoundDisabled",38,73,71,56));
	outFields->push(HX_("mania",f2,c0,1e,03));
	outFields->push(HX_("ogW",3f,94,54,00));
	outFields->push(HX_("ogH",30,94,54,00));
	outFields->push(HX_("defaultWidth",85,f1,bd,7f));
	outFields->push(HX_("defaultHeight",88,db,c4,fc));
	outFields->push(HX_("lastNoteOffsetXForPixelAutoAdjusting",2a,95,91,c2));
	outFields->push(HX_("lastNoteScaleToo",b2,17,8e,a9));
	outFields->push(HX_("originalHeightForCalcs",ad,c9,e0,c5));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Note_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Note_obj,gfxLetter),HX_("gfxLetter",3f,83,e7,fe)},
	{::hx::fsFloat,(int)offsetof(Note_obj,strumTime),HX_("strumTime",f6,2d,21,f4)},
	{::hx::fsBool,(int)offsetof(Note_obj,mustPress),HX_("mustPress",ba,d4,17,60)},
	{::hx::fsInt,(int)offsetof(Note_obj,noteData),HX_("noteData",3c,7b,96,51)},
	{::hx::fsBool,(int)offsetof(Note_obj,canBeHit),HX_("canBeHit",20,a6,d1,1e)},
	{::hx::fsBool,(int)offsetof(Note_obj,tooLate),HX_("tooLate",da,77,57,55)},
	{::hx::fsBool,(int)offsetof(Note_obj,wasGoodHit),HX_("wasGoodHit",ed,7a,9b,17)},
	{::hx::fsBool,(int)offsetof(Note_obj,ignoreNote),HX_("ignoreNote",24,ee,32,49)},
	{::hx::fsBool,(int)offsetof(Note_obj,hitByOpponent),HX_("hitByOpponent",c7,8a,37,cc)},
	{::hx::fsBool,(int)offsetof(Note_obj,noteWasHit),HX_("noteWasHit",3c,ca,a4,58)},
	{::hx::fsObject /*  ::Note */ ,(int)offsetof(Note_obj,prevNote),HX_("prevNote",85,f8,d7,11)},
	{::hx::fsFloat,(int)offsetof(Note_obj,sustainLength),HX_("sustainLength",e9,a1,9c,7c)},
	{::hx::fsBool,(int)offsetof(Note_obj,isSustainNote),HX_("isSustainNote",6b,1e,77,c3)},
	{::hx::fsString,(int)offsetof(Note_obj,noteType),HX_("noteType",cc,17,3c,5c)},
	{::hx::fsString,(int)offsetof(Note_obj,eventName),HX_("eventName",85,7b,0c,f8)},
	{::hx::fsInt,(int)offsetof(Note_obj,eventLength),HX_("eventLength",a0,e0,54,f2)},
	{::hx::fsString,(int)offsetof(Note_obj,eventVal1),HX_("eventVal1",6a,2f,56,fd)},
	{::hx::fsString,(int)offsetof(Note_obj,eventVal2),HX_("eventVal2",6b,2f,56,fd)},
	{::hx::fsObject /*  ::ColorSwap */ ,(int)offsetof(Note_obj,colorSwap),HX_("colorSwap",96,b5,cb,27)},
	{::hx::fsBool,(int)offsetof(Note_obj,inEditor),HX_("inEditor",72,8b,5b,c4)},
	{::hx::fsBool,(int)offsetof(Note_obj,gfNote),HX_("gfNote",b1,99,84,1d)},
	{::hx::fsFloat,(int)offsetof(Note_obj,earlyHitMult),HX_("earlyHitMult",80,a9,e2,17)},
	{::hx::fsBool,(int)offsetof(Note_obj,noteSplashDisabled),HX_("noteSplashDisabled",95,ad,6f,54)},
	{::hx::fsString,(int)offsetof(Note_obj,noteSplashTexture),HX_("noteSplashTexture",e2,22,64,f9)},
	{::hx::fsFloat,(int)offsetof(Note_obj,noteSplashHue),HX_("noteSplashHue",3f,5b,ed,f6)},
	{::hx::fsFloat,(int)offsetof(Note_obj,noteSplashSat),HX_("noteSplashSat",ad,a2,f5,f6)},
	{::hx::fsFloat,(int)offsetof(Note_obj,noteSplashBrt),HX_("noteSplashBrt",2b,cb,e8,f6)},
	{::hx::fsFloat,(int)offsetof(Note_obj,offsetX),HX_("offsetX",65,09,65,d7)},
	{::hx::fsFloat,(int)offsetof(Note_obj,offsetY),HX_("offsetY",66,09,65,d7)},
	{::hx::fsFloat,(int)offsetof(Note_obj,offsetAngle),HX_("offsetAngle",40,c7,62,bb)},
	{::hx::fsFloat,(int)offsetof(Note_obj,multAlpha),HX_("multAlpha",4e,e9,0f,96)},
	{::hx::fsBool,(int)offsetof(Note_obj,copyX),HX_("copyX",03,83,5f,4a)},
	{::hx::fsBool,(int)offsetof(Note_obj,copyY),HX_("copyY",04,83,5f,4a)},
	{::hx::fsBool,(int)offsetof(Note_obj,copyAngle),HX_("copyAngle",de,67,dd,a8)},
	{::hx::fsBool,(int)offsetof(Note_obj,copyAlpha),HX_("copyAlpha",69,cb,91,a7)},
	{::hx::fsFloat,(int)offsetof(Note_obj,hitHealth),HX_("hitHealth",4f,e3,17,31)},
	{::hx::fsFloat,(int)offsetof(Note_obj,missHealth),HX_("missHealth",b8,54,21,f6)},
	{::hx::fsString,(int)offsetof(Note_obj,rating),HX_("rating",1d,34,8a,bb)},
	{::hx::fsFloat,(int)offsetof(Note_obj,ratingMod),HX_("ratingMod",a5,4a,34,09)},
	{::hx::fsBool,(int)offsetof(Note_obj,ratingDisabled),HX_("ratingDisabled",b9,16,ed,99)},
	{::hx::fsString,(int)offsetof(Note_obj,texture),HX_("texture",db,c8,e0,9e)},
	{::hx::fsBool,(int)offsetof(Note_obj,noAnimation),HX_("noAnimation",83,de,e3,ac)},
	{::hx::fsBool,(int)offsetof(Note_obj,hitCausesMiss),HX_("hitCausesMiss",39,dc,fd,91)},
	{::hx::fsFloat,(int)offsetof(Note_obj,distance),HX_("distance",35,93,f9,6b)},
	{::hx::fsBool,(int)offsetof(Note_obj,hitsoundDisabled),HX_("hitsoundDisabled",38,73,71,56)},
	{::hx::fsInt,(int)offsetof(Note_obj,mania),HX_("mania",f2,c0,1e,03)},
	{::hx::fsFloat,(int)offsetof(Note_obj,ogW),HX_("ogW",3f,94,54,00)},
	{::hx::fsFloat,(int)offsetof(Note_obj,ogH),HX_("ogH",30,94,54,00)},
	{::hx::fsFloat,(int)offsetof(Note_obj,defaultWidth),HX_("defaultWidth",85,f1,bd,7f)},
	{::hx::fsFloat,(int)offsetof(Note_obj,defaultHeight),HX_("defaultHeight",88,db,c4,fc)},
	{::hx::fsFloat,(int)offsetof(Note_obj,lastNoteOffsetXForPixelAutoAdjusting),HX_("lastNoteOffsetXForPixelAutoAdjusting",2a,95,91,c2)},
	{::hx::fsFloat,(int)offsetof(Note_obj,lastNoteScaleToo),HX_("lastNoteScaleToo",b2,17,8e,a9)},
	{::hx::fsFloat,(int)offsetof(Note_obj,originalHeightForCalcs),HX_("originalHeightForCalcs",ad,c9,e0,c5)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Note_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Array< Float > */ ,(void *) &Note_obj::scales,HX_("scales",a9,ea,25,3c)},
	{::hx::fsObject /* ::Array< int > */ ,(void *) &Note_obj::lessX,HX_("lessX",df,da,60,72)},
	{::hx::fsObject /* ::Array< int > */ ,(void *) &Note_obj::separator,HX_("separator",65,60,7f,31)},
	{::hx::fsObject /* ::Array< int > */ ,(void *) &Note_obj::xtra,HX_("xtra",ab,03,aa,4f)},
	{::hx::fsObject /* ::Array< int > */ ,(void *) &Note_obj::posRest,HX_("posRest",c8,3e,96,00)},
	{::hx::fsObject /* ::Array< int > */ ,(void *) &Note_obj::gridSizes,HX_("gridSizes",ec,53,9c,71)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(void *) &Note_obj::offsets,HX_("offsets",80,09,65,d7)},
	{::hx::fsInt,(void *) &Note_obj::minMania,HX_("minMania",00,2e,56,fa)},
	{::hx::fsInt,(void *) &Note_obj::maxMania,HX_("maxMania",ae,13,3c,ad)},
	{::hx::fsInt,(void *) &Note_obj::defaultMania,HX_("defaultMania",71,fc,79,b8)},
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(void *) &Note_obj::keysShit,HX_("keysShit",d4,e7,7c,1f)},
	{::hx::fsObject /* ::Array< int > */ ,(void *) &Note_obj::ammo,HX_("ammo",4e,c7,70,40)},
	{::hx::fsObject /* ::Array< Float > */ ,(void *) &Note_obj::pixelScales,HX_("pixelScales",cf,cd,b2,ad)},
	{::hx::fsFloat,(void *) &Note_obj::swagWidth,HX_("swagWidth",1c,87,d9,a6)},
	{::hx::fsInt,(void *) &Note_obj::PURP_NOTE,HX_("PURP_NOTE",ee,97,79,1e)},
	{::hx::fsInt,(void *) &Note_obj::GREEN_NOTE,HX_("GREEN_NOTE",4e,c6,8e,9c)},
	{::hx::fsInt,(void *) &Note_obj::BLUE_NOTE,HX_("BLUE_NOTE",f7,42,53,a9)},
	{::hx::fsInt,(void *) &Note_obj::RED_NOTE,HX_("RED_NOTE",00,15,92,9e)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Note_obj_sMemberFields[] = {
	HX_("gfxLetter",3f,83,e7,fe),
	HX_("strumTime",f6,2d,21,f4),
	HX_("mustPress",ba,d4,17,60),
	HX_("noteData",3c,7b,96,51),
	HX_("canBeHit",20,a6,d1,1e),
	HX_("tooLate",da,77,57,55),
	HX_("wasGoodHit",ed,7a,9b,17),
	HX_("ignoreNote",24,ee,32,49),
	HX_("hitByOpponent",c7,8a,37,cc),
	HX_("noteWasHit",3c,ca,a4,58),
	HX_("prevNote",85,f8,d7,11),
	HX_("sustainLength",e9,a1,9c,7c),
	HX_("isSustainNote",6b,1e,77,c3),
	HX_("noteType",cc,17,3c,5c),
	HX_("eventName",85,7b,0c,f8),
	HX_("eventLength",a0,e0,54,f2),
	HX_("eventVal1",6a,2f,56,fd),
	HX_("eventVal2",6b,2f,56,fd),
	HX_("colorSwap",96,b5,cb,27),
	HX_("inEditor",72,8b,5b,c4),
	HX_("gfNote",b1,99,84,1d),
	HX_("earlyHitMult",80,a9,e2,17),
	HX_("noteSplashDisabled",95,ad,6f,54),
	HX_("noteSplashTexture",e2,22,64,f9),
	HX_("noteSplashHue",3f,5b,ed,f6),
	HX_("noteSplashSat",ad,a2,f5,f6),
	HX_("noteSplashBrt",2b,cb,e8,f6),
	HX_("offsetX",65,09,65,d7),
	HX_("offsetY",66,09,65,d7),
	HX_("offsetAngle",40,c7,62,bb),
	HX_("multAlpha",4e,e9,0f,96),
	HX_("copyX",03,83,5f,4a),
	HX_("copyY",04,83,5f,4a),
	HX_("copyAngle",de,67,dd,a8),
	HX_("copyAlpha",69,cb,91,a7),
	HX_("hitHealth",4f,e3,17,31),
	HX_("missHealth",b8,54,21,f6),
	HX_("rating",1d,34,8a,bb),
	HX_("ratingMod",a5,4a,34,09),
	HX_("ratingDisabled",b9,16,ed,99),
	HX_("texture",db,c8,e0,9e),
	HX_("noAnimation",83,de,e3,ac),
	HX_("hitCausesMiss",39,dc,fd,91),
	HX_("distance",35,93,f9,6b),
	HX_("hitsoundDisabled",38,73,71,56),
	HX_("mania",f2,c0,1e,03),
	HX_("ogW",3f,94,54,00),
	HX_("ogH",30,94,54,00),
	HX_("defaultWidth",85,f1,bd,7f),
	HX_("defaultHeight",88,db,c4,fc),
	HX_("set_texture",fe,2f,48,2f),
	HX_("set_noteType",49,ef,4e,26),
	HX_("lastNoteOffsetXForPixelAutoAdjusting",2a,95,91,c2),
	HX_("lastNoteScaleToo",b2,17,8e,a9),
	HX_("originalHeightForCalcs",ad,c9,e0,c5),
	HX_("reloadNote",eb,b7,11,94),
	HX_("loadNoteAnims",ea,e4,d6,e2),
	HX_("loadPixelNoteAnims",50,91,b2,72),
	HX_("applyManiaChange",34,55,0c,ba),
	HX_("update",09,86,05,87),
	::String(null()) };

static void Note_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Note_obj::scales,"scales");
	HX_MARK_MEMBER_NAME(Note_obj::lessX,"lessX");
	HX_MARK_MEMBER_NAME(Note_obj::separator,"separator");
	HX_MARK_MEMBER_NAME(Note_obj::xtra,"xtra");
	HX_MARK_MEMBER_NAME(Note_obj::posRest,"posRest");
	HX_MARK_MEMBER_NAME(Note_obj::gridSizes,"gridSizes");
	HX_MARK_MEMBER_NAME(Note_obj::offsets,"offsets");
	HX_MARK_MEMBER_NAME(Note_obj::minMania,"minMania");
	HX_MARK_MEMBER_NAME(Note_obj::maxMania,"maxMania");
	HX_MARK_MEMBER_NAME(Note_obj::defaultMania,"defaultMania");
	HX_MARK_MEMBER_NAME(Note_obj::keysShit,"keysShit");
	HX_MARK_MEMBER_NAME(Note_obj::ammo,"ammo");
	HX_MARK_MEMBER_NAME(Note_obj::pixelScales,"pixelScales");
	HX_MARK_MEMBER_NAME(Note_obj::swagWidth,"swagWidth");
	HX_MARK_MEMBER_NAME(Note_obj::PURP_NOTE,"PURP_NOTE");
	HX_MARK_MEMBER_NAME(Note_obj::GREEN_NOTE,"GREEN_NOTE");
	HX_MARK_MEMBER_NAME(Note_obj::BLUE_NOTE,"BLUE_NOTE");
	HX_MARK_MEMBER_NAME(Note_obj::RED_NOTE,"RED_NOTE");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Note_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Note_obj::scales,"scales");
	HX_VISIT_MEMBER_NAME(Note_obj::lessX,"lessX");
	HX_VISIT_MEMBER_NAME(Note_obj::separator,"separator");
	HX_VISIT_MEMBER_NAME(Note_obj::xtra,"xtra");
	HX_VISIT_MEMBER_NAME(Note_obj::posRest,"posRest");
	HX_VISIT_MEMBER_NAME(Note_obj::gridSizes,"gridSizes");
	HX_VISIT_MEMBER_NAME(Note_obj::offsets,"offsets");
	HX_VISIT_MEMBER_NAME(Note_obj::minMania,"minMania");
	HX_VISIT_MEMBER_NAME(Note_obj::maxMania,"maxMania");
	HX_VISIT_MEMBER_NAME(Note_obj::defaultMania,"defaultMania");
	HX_VISIT_MEMBER_NAME(Note_obj::keysShit,"keysShit");
	HX_VISIT_MEMBER_NAME(Note_obj::ammo,"ammo");
	HX_VISIT_MEMBER_NAME(Note_obj::pixelScales,"pixelScales");
	HX_VISIT_MEMBER_NAME(Note_obj::swagWidth,"swagWidth");
	HX_VISIT_MEMBER_NAME(Note_obj::PURP_NOTE,"PURP_NOTE");
	HX_VISIT_MEMBER_NAME(Note_obj::GREEN_NOTE,"GREEN_NOTE");
	HX_VISIT_MEMBER_NAME(Note_obj::BLUE_NOTE,"BLUE_NOTE");
	HX_VISIT_MEMBER_NAME(Note_obj::RED_NOTE,"RED_NOTE");
};

#endif

::hx::Class Note_obj::__mClass;

static ::String Note_obj_sStaticFields[] = {
	HX_("scales",a9,ea,25,3c),
	HX_("lessX",df,da,60,72),
	HX_("separator",65,60,7f,31),
	HX_("xtra",ab,03,aa,4f),
	HX_("posRest",c8,3e,96,00),
	HX_("gridSizes",ec,53,9c,71),
	HX_("offsets",80,09,65,d7),
	HX_("minMania",00,2e,56,fa),
	HX_("maxMania",ae,13,3c,ad),
	HX_("defaultMania",71,fc,79,b8),
	HX_("keysShit",d4,e7,7c,1f),
	HX_("ammo",4e,c7,70,40),
	HX_("pixelScales",cf,cd,b2,ad),
	HX_("swagWidth",1c,87,d9,a6),
	HX_("PURP_NOTE",ee,97,79,1e),
	HX_("GREEN_NOTE",4e,c6,8e,9c),
	HX_("BLUE_NOTE",f7,42,53,a9),
	HX_("RED_NOTE",00,15,92,9e),
	::String(null())
};

void Note_obj::__register()
{
	Note_obj _hx_dummy;
	Note_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Note",12,44,e3,33);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Note_obj::__GetStatic;
	__mClass->mSetStaticField = &Note_obj::__SetStatic;
	__mClass->mMarkFunc = Note_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Note_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Note_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Note_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Note_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Note_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Note_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Note_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_26_boot)
HXDLIN(  26)		scales = ::Array_obj< Float >::fromData( _hx_array_data_33e34412_14,11);
            	}
{
            	HX_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_27_boot)
HXDLIN(  27)		lessX = ::Array_obj< int >::fromData( _hx_array_data_33e34412_16,11);
            	}
{
            	HX_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_28_boot)
HXDLIN(  28)		separator = ::Array_obj< int >::fromData( _hx_array_data_33e34412_18,11);
            	}
{
            	HX_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_29_boot)
HXDLIN(  29)		xtra = ::Array_obj< int >::fromData( _hx_array_data_33e34412_20,11);
            	}
{
            	HX_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_30_boot)
HXDLIN(  30)		posRest = ::Array_obj< int >::fromData( _hx_array_data_33e34412_22,11);
            	}
{
            	HX_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_31_boot)
HXDLIN(  31)		gridSizes = ::Array_obj< int >::fromData( _hx_array_data_33e34412_24,11);
            	}
{
            	HX_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_32_boot)
HXDLIN(  32)		offsets = ::cpp::VirtualArray_obj::__new(12)->init(0,::cpp::VirtualArray_obj::__new(2)->init(0,20)->init(1,10))->init(1,::cpp::VirtualArray_obj::__new(2)->init(0,10)->init(1,10))->init(2,::cpp::VirtualArray_obj::__new(2)->init(0,10)->init(1,10))->init(3,::cpp::VirtualArray_obj::__new(2)->init(0,10)->init(1,10))->init(4,::cpp::VirtualArray_obj::__new(2)->init(0,10)->init(1,10))->init(5,::cpp::VirtualArray_obj::__new(2)->init(0,10)->init(1,10))->init(6,::cpp::VirtualArray_obj::__new(2)->init(0,10)->init(1,10))->init(7,::cpp::VirtualArray_obj::__new(2)->init(0,10)->init(1,10))->init(8,::cpp::VirtualArray_obj::__new(2)->init(0,10)->init(1,10))->init(9,::cpp::VirtualArray_obj::__new(2)->init(0,10)->init(1,20))->init(10,::cpp::VirtualArray_obj::__new(2)->init(0,10)->init(1,10))->init(11,::cpp::VirtualArray_obj::__new(2)->init(0,10)->init(1,10));
            	}
{
            	HX_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_47_boot)
HXDLIN(  47)		minMania = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_48_boot)
HXDLIN(  48)		maxMania = 10;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_49_boot)
HXDLIN(  49)		defaultMania = 3;
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::haxe::ds::IntMap _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_51_boot)
HXDLIN(  51)			 ::haxe::ds::IntMap _g =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXDLIN(  51)			{
HXLINE(  52)				 ::haxe::ds::StringMap _g1 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  52)				_g1->set(HX_("letters",cd,9c,8e,04),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("E",45,00,00,00)));
HXDLIN(  52)				_g1->set(HX_("anims",42,c9,e3,22),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("UP",5b,4a,00,00)));
HXDLIN(  52)				_g1->set(HX_("strumAnims",39,13,95,bb),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("SPACE",a6,c4,54,ff)));
HXDLIN(  52)				_g1->set(HX_("pixelAnimIndex",db,ff,1c,a8),::cpp::VirtualArray_obj::__new(1)->init(0,4));
HXLINE(  51)				_g->set(0,_g1);
            			}
HXDLIN(  51)			{
HXLINE(  53)				 ::haxe::ds::StringMap _g2 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  53)				_g2->set(HX_("letters",cd,9c,8e,04),::cpp::VirtualArray_obj::__new(2)->init(0,HX_("A",41,00,00,00))->init(1,HX_("D",44,00,00,00)));
HXDLIN(  53)				_g2->set(HX_("anims",42,c9,e3,22),::cpp::VirtualArray_obj::__new(2)->init(0,HX_("LEFT",07,d0,70,32))->init(1,HX_("RIGHT",bc,43,52,67)));
HXDLIN(  53)				_g2->set(HX_("strumAnims",39,13,95,bb),::cpp::VirtualArray_obj::__new(2)->init(0,HX_("LEFT",07,d0,70,32))->init(1,HX_("RIGHT",bc,43,52,67)));
HXDLIN(  53)				_g2->set(HX_("pixelAnimIndex",db,ff,1c,a8),::cpp::VirtualArray_obj::__new(2)->init(0,0)->init(1,3));
HXLINE(  51)				_g->set(1,_g2);
            			}
HXDLIN(  51)			{
HXLINE(  54)				 ::haxe::ds::StringMap _g3 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  54)				_g3->set(HX_("letters",cd,9c,8e,04),::cpp::VirtualArray_obj::__new(3)->init(0,HX_("A",41,00,00,00))->init(1,HX_("E",45,00,00,00))->init(2,HX_("D",44,00,00,00)));
HXDLIN(  54)				_g3->set(HX_("anims",42,c9,e3,22),::cpp::VirtualArray_obj::__new(3)->init(0,HX_("LEFT",07,d0,70,32))->init(1,HX_("UP",5b,4a,00,00))->init(2,HX_("RIGHT",bc,43,52,67)));
HXDLIN(  54)				_g3->set(HX_("strumAnims",39,13,95,bb),::cpp::VirtualArray_obj::__new(3)->init(0,HX_("LEFT",07,d0,70,32))->init(1,HX_("SPACE",a6,c4,54,ff))->init(2,HX_("RIGHT",bc,43,52,67)));
HXDLIN(  54)				_g3->set(HX_("pixelAnimIndex",db,ff,1c,a8),::cpp::VirtualArray_obj::__new(3)->init(0,0)->init(1,4)->init(2,3));
HXLINE(  51)				_g->set(2,_g3);
            			}
HXDLIN(  51)			{
HXLINE(  55)				 ::haxe::ds::StringMap _g4 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  55)				_g4->set(HX_("letters",cd,9c,8e,04),::cpp::VirtualArray_obj::__new(4)->init(0,HX_("A",41,00,00,00))->init(1,HX_("B",42,00,00,00))->init(2,HX_("C",43,00,00,00))->init(3,HX_("D",44,00,00,00)));
HXDLIN(  55)				_g4->set(HX_("anims",42,c9,e3,22),::cpp::VirtualArray_obj::__new(4)->init(0,HX_("LEFT",07,d0,70,32))->init(1,HX_("DOWN",62,c0,2e,2d))->init(2,HX_("UP",5b,4a,00,00))->init(3,HX_("RIGHT",bc,43,52,67)));
HXDLIN(  55)				_g4->set(HX_("strumAnims",39,13,95,bb),::cpp::VirtualArray_obj::__new(4)->init(0,HX_("LEFT",07,d0,70,32))->init(1,HX_("DOWN",62,c0,2e,2d))->init(2,HX_("UP",5b,4a,00,00))->init(3,HX_("RIGHT",bc,43,52,67)));
HXDLIN(  55)				_g4->set(HX_("pixelAnimIndex",db,ff,1c,a8),::cpp::VirtualArray_obj::__new(4)->init(0,0)->init(1,1)->init(2,2)->init(3,3));
HXLINE(  51)				_g->set(3,_g4);
            			}
HXDLIN(  51)			{
HXLINE(  57)				 ::haxe::ds::StringMap _g5 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  57)				_g5->set(HX_("letters",cd,9c,8e,04),::cpp::VirtualArray_obj::__new(5)->init(0,HX_("A",41,00,00,00))->init(1,HX_("B",42,00,00,00))->init(2,HX_("E",45,00,00,00))->init(3,HX_("C",43,00,00,00))->init(4,HX_("D",44,00,00,00)));
HXDLIN(  57)				_g5->set(HX_("anims",42,c9,e3,22),::cpp::VirtualArray_obj::__new(5)->init(0,HX_("LEFT",07,d0,70,32))->init(1,HX_("DOWN",62,c0,2e,2d))->init(2,HX_("UP",5b,4a,00,00))->init(3,HX_("UP",5b,4a,00,00))->init(4,HX_("RIGHT",bc,43,52,67)));
HXDLIN(  57)				_g5->set(HX_("strumAnims",39,13,95,bb),::cpp::VirtualArray_obj::__new(5)->init(0,HX_("LEFT",07,d0,70,32))->init(1,HX_("DOWN",62,c0,2e,2d))->init(2,HX_("SPACE",a6,c4,54,ff))->init(3,HX_("UP",5b,4a,00,00))->init(4,HX_("RIGHT",bc,43,52,67)));
HXDLIN(  57)				_g5->set(HX_("pixelAnimIndex",db,ff,1c,a8),::cpp::VirtualArray_obj::__new(5)->init(0,0)->init(1,1)->init(2,4)->init(3,2)->init(4,3));
HXLINE(  51)				_g->set(4,_g5);
            			}
HXDLIN(  51)			{
HXLINE(  60)				 ::haxe::ds::StringMap _g6 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  60)				_g6->set(HX_("letters",cd,9c,8e,04),::cpp::VirtualArray_obj::__new(6)->init(0,HX_("A",41,00,00,00))->init(1,HX_("C",43,00,00,00))->init(2,HX_("D",44,00,00,00))->init(3,HX_("F",46,00,00,00))->init(4,HX_("B",42,00,00,00))->init(5,HX_("I",49,00,00,00)));
HXDLIN(  60)				_g6->set(HX_("anims",42,c9,e3,22),::cpp::VirtualArray_obj::__new(6)->init(0,HX_("LEFT",07,d0,70,32))->init(1,HX_("UP",5b,4a,00,00))->init(2,HX_("RIGHT",bc,43,52,67))->init(3,HX_("LEFT",07,d0,70,32))->init(4,HX_("DOWN",62,c0,2e,2d))->init(5,HX_("RIGHT",bc,43,52,67)));
HXDLIN(  60)				_g6->set(HX_("strumAnims",39,13,95,bb),::cpp::VirtualArray_obj::__new(6)->init(0,HX_("LEFT",07,d0,70,32))->init(1,HX_("UP",5b,4a,00,00))->init(2,HX_("RIGHT",bc,43,52,67))->init(3,HX_("LEFT",07,d0,70,32))->init(4,HX_("DOWN",62,c0,2e,2d))->init(5,HX_("RIGHT",bc,43,52,67)));
HXDLIN(  60)				_g6->set(HX_("pixelAnimIndex",db,ff,1c,a8),::cpp::VirtualArray_obj::__new(6)->init(0,0)->init(1,2)->init(2,3)->init(3,5)->init(4,1)->init(5,8));
HXLINE(  51)				_g->set(5,_g6);
            			}
HXDLIN(  51)			{
HXLINE(  63)				 ::haxe::ds::StringMap _g7 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  63)				_g7->set(HX_("letters",cd,9c,8e,04),::cpp::VirtualArray_obj::__new(7)->init(0,HX_("A",41,00,00,00))->init(1,HX_("C",43,00,00,00))->init(2,HX_("D",44,00,00,00))->init(3,HX_("E",45,00,00,00))->init(4,HX_("F",46,00,00,00))->init(5,HX_("B",42,00,00,00))->init(6,HX_("I",49,00,00,00)));
HXDLIN(  63)				_g7->set(HX_("anims",42,c9,e3,22),::cpp::VirtualArray_obj::__new(7)->init(0,HX_("LEFT",07,d0,70,32))->init(1,HX_("UP",5b,4a,00,00))->init(2,HX_("RIGHT",bc,43,52,67))->init(3,HX_("UP",5b,4a,00,00))->init(4,HX_("LEFT",07,d0,70,32))->init(5,HX_("DOWN",62,c0,2e,2d))->init(6,HX_("RIGHT",bc,43,52,67)));
HXDLIN(  63)				_g7->set(HX_("strumAnims",39,13,95,bb),::cpp::VirtualArray_obj::__new(7)->init(0,HX_("LEFT",07,d0,70,32))->init(1,HX_("UP",5b,4a,00,00))->init(2,HX_("RIGHT",bc,43,52,67))->init(3,HX_("SPACE",a6,c4,54,ff))->init(4,HX_("LEFT",07,d0,70,32))->init(5,HX_("DOWN",62,c0,2e,2d))->init(6,HX_("RIGHT",bc,43,52,67)));
HXDLIN(  63)				_g7->set(HX_("pixelAnimIndex",db,ff,1c,a8),::cpp::VirtualArray_obj::__new(7)->init(0,0)->init(1,2)->init(2,3)->init(3,4)->init(4,5)->init(5,1)->init(6,8));
HXLINE(  51)				_g->set(6,_g7);
            			}
HXDLIN(  51)			{
HXLINE(  66)				 ::haxe::ds::StringMap _g8 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  66)				_g8->set(HX_("letters",cd,9c,8e,04),::cpp::VirtualArray_obj::__new(8)->init(0,HX_("A",41,00,00,00))->init(1,HX_("B",42,00,00,00))->init(2,HX_("C",43,00,00,00))->init(3,HX_("D",44,00,00,00))->init(4,HX_("F",46,00,00,00))->init(5,HX_("G",47,00,00,00))->init(6,HX_("H",48,00,00,00))->init(7,HX_("I",49,00,00,00)));
HXDLIN(  66)				_g8->set(HX_("anims",42,c9,e3,22),::cpp::VirtualArray_obj::__new(8)->init(0,HX_("LEFT",07,d0,70,32))->init(1,HX_("UP",5b,4a,00,00))->init(2,HX_("DOWN",62,c0,2e,2d))->init(3,HX_("RIGHT",bc,43,52,67))->init(4,HX_("LEFT",07,d0,70,32))->init(5,HX_("DOWN",62,c0,2e,2d))->init(6,HX_("UP",5b,4a,00,00))->init(7,HX_("RIGHT",bc,43,52,67)));
HXDLIN(  66)				_g8->set(HX_("strumAnims",39,13,95,bb),::cpp::VirtualArray_obj::__new(8)->init(0,HX_("LEFT",07,d0,70,32))->init(1,HX_("DOWN",62,c0,2e,2d))->init(2,HX_("UP",5b,4a,00,00))->init(3,HX_("RIGHT",bc,43,52,67))->init(4,HX_("LEFT",07,d0,70,32))->init(5,HX_("DOWN",62,c0,2e,2d))->init(6,HX_("UP",5b,4a,00,00))->init(7,HX_("RIGHT",bc,43,52,67)));
HXDLIN(  66)				_g8->set(HX_("pixelAnimIndex",db,ff,1c,a8),::cpp::VirtualArray_obj::__new(8)->init(0,0)->init(1,1)->init(2,2)->init(3,3)->init(4,5)->init(5,6)->init(6,7)->init(7,8));
HXLINE(  51)				_g->set(7,_g8);
            			}
HXDLIN(  51)			{
HXLINE(  69)				 ::haxe::ds::StringMap _g9 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  69)				_g9->set(HX_("letters",cd,9c,8e,04),::cpp::VirtualArray_obj::__new(9)->init(0,HX_("A",41,00,00,00))->init(1,HX_("B",42,00,00,00))->init(2,HX_("C",43,00,00,00))->init(3,HX_("D",44,00,00,00))->init(4,HX_("E",45,00,00,00))->init(5,HX_("F",46,00,00,00))->init(6,HX_("G",47,00,00,00))->init(7,HX_("H",48,00,00,00))->init(8,HX_("I",49,00,00,00)));
HXDLIN(  69)				_g9->set(HX_("anims",42,c9,e3,22),::cpp::VirtualArray_obj::__new(9)->init(0,HX_("LEFT",07,d0,70,32))->init(1,HX_("DOWN",62,c0,2e,2d))->init(2,HX_("UP",5b,4a,00,00))->init(3,HX_("RIGHT",bc,43,52,67))->init(4,HX_("UP",5b,4a,00,00))->init(5,HX_("LEFT",07,d0,70,32))->init(6,HX_("DOWN",62,c0,2e,2d))->init(7,HX_("UP",5b,4a,00,00))->init(8,HX_("RIGHT",bc,43,52,67)));
HXDLIN(  69)				_g9->set(HX_("strumAnims",39,13,95,bb),::cpp::VirtualArray_obj::__new(9)->init(0,HX_("LEFT",07,d0,70,32))->init(1,HX_("DOWN",62,c0,2e,2d))->init(2,HX_("UP",5b,4a,00,00))->init(3,HX_("RIGHT",bc,43,52,67))->init(4,HX_("SPACE",a6,c4,54,ff))->init(5,HX_("LEFT",07,d0,70,32))->init(6,HX_("DOWN",62,c0,2e,2d))->init(7,HX_("UP",5b,4a,00,00))->init(8,HX_("RIGHT",bc,43,52,67)));
HXDLIN(  69)				_g9->set(HX_("pixelAnimIndex",db,ff,1c,a8),::cpp::VirtualArray_obj::__new(9)->init(0,0)->init(1,1)->init(2,2)->init(3,3)->init(4,4)->init(5,5)->init(6,6)->init(7,7)->init(8,8));
HXLINE(  51)				_g->set(8,_g9);
            			}
HXDLIN(  51)			{
HXLINE(  72)				 ::haxe::ds::StringMap _g10 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  72)				_g10->set(HX_("letters",cd,9c,8e,04),::cpp::VirtualArray_obj::__new(10)->init(0,HX_("A",41,00,00,00))->init(1,HX_("B",42,00,00,00))->init(2,HX_("C",43,00,00,00))->init(3,HX_("D",44,00,00,00))->init(4,HX_("E",45,00,00,00))->init(5,HX_("N",4e,00,00,00))->init(6,HX_("F",46,00,00,00))->init(7,HX_("G",47,00,00,00))->init(8,HX_("H",48,00,00,00))->init(9,HX_("I",49,00,00,00)));
HXDLIN(  72)				_g10->set(HX_("anims",42,c9,e3,22),::cpp::VirtualArray_obj::__new(10)->init(0,HX_("LEFT",07,d0,70,32))->init(1,HX_("DOWN",62,c0,2e,2d))->init(2,HX_("UP",5b,4a,00,00))->init(3,HX_("RIGHT",bc,43,52,67))->init(4,HX_("UP",5b,4a,00,00))->init(5,HX_("UP",5b,4a,00,00))->init(6,HX_("LEFT",07,d0,70,32))->init(7,HX_("DOWN",62,c0,2e,2d))->init(8,HX_("UP",5b,4a,00,00))->init(9,HX_("RIGHT",bc,43,52,67)));
HXDLIN(  72)				_g10->set(HX_("strumAnims",39,13,95,bb),::cpp::VirtualArray_obj::__new(10)->init(0,HX_("LEFT",07,d0,70,32))->init(1,HX_("DOWN",62,c0,2e,2d))->init(2,HX_("UP",5b,4a,00,00))->init(3,HX_("RIGHT",bc,43,52,67))->init(4,HX_("SPACE",a6,c4,54,ff))->init(5,HX_("CIRCLE",10,1e,90,08))->init(6,HX_("LEFT",07,d0,70,32))->init(7,HX_("DOWN",62,c0,2e,2d))->init(8,HX_("UP",5b,4a,00,00))->init(9,HX_("RIGHT",bc,43,52,67)));
HXDLIN(  72)				_g10->set(HX_("pixelAnimIndex",db,ff,1c,a8),::cpp::VirtualArray_obj::__new(10)->init(0,0)->init(1,1)->init(2,2)->init(3,3)->init(4,4)->init(5,13)->init(6,5)->init(7,6)->init(8,7)->init(9,8));
HXLINE(  51)				_g->set(9,_g10);
            			}
HXDLIN(  51)			{
HXLINE(  75)				 ::haxe::ds::StringMap _g11 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  75)				_g11->set(HX_("letters",cd,9c,8e,04),::cpp::VirtualArray_obj::__new(11)->init(0,HX_("A",41,00,00,00))->init(1,HX_("B",42,00,00,00))->init(2,HX_("C",43,00,00,00))->init(3,HX_("D",44,00,00,00))->init(4,HX_("J",4a,00,00,00))->init(5,HX_("N",4e,00,00,00))->init(6,HX_("M",4d,00,00,00))->init(7,HX_("F",46,00,00,00))->init(8,HX_("G",47,00,00,00))->init(9,HX_("H",48,00,00,00))->init(10,HX_("I",49,00,00,00)));
HXDLIN(  75)				_g11->set(HX_("anims",42,c9,e3,22),::cpp::VirtualArray_obj::__new(11)->init(0,HX_("LEFT",07,d0,70,32))->init(1,HX_("DOWN",62,c0,2e,2d))->init(2,HX_("UP",5b,4a,00,00))->init(3,HX_("RIGHT",bc,43,52,67))->init(4,HX_("LEFT",07,d0,70,32))->init(5,HX_("UP",5b,4a,00,00))->init(6,HX_("RIGHT",bc,43,52,67))->init(7,HX_("LEFT",07,d0,70,32))->init(8,HX_("DOWN",62,c0,2e,2d))->init(9,HX_("UP",5b,4a,00,00))->init(10,HX_("RIGHT",bc,43,52,67)));
HXDLIN(  75)				_g11->set(HX_("strumAnims",39,13,95,bb),::cpp::VirtualArray_obj::__new(11)->init(0,HX_("LEFT",07,d0,70,32))->init(1,HX_("DOWN",62,c0,2e,2d))->init(2,HX_("UP",5b,4a,00,00))->init(3,HX_("RIGHT",bc,43,52,67))->init(4,HX_("CIRCLE",10,1e,90,08))->init(5,HX_("CIRCLE",10,1e,90,08))->init(6,HX_("CIRCLE",10,1e,90,08))->init(7,HX_("LEFT",07,d0,70,32))->init(8,HX_("DOWN",62,c0,2e,2d))->init(9,HX_("UP",5b,4a,00,00))->init(10,HX_("RIGHT",bc,43,52,67)));
HXDLIN(  75)				_g11->set(HX_("pixelAnimIndex",db,ff,1c,a8),::cpp::VirtualArray_obj::__new(11)->init(0,0)->init(1,1)->init(2,2)->init(3,3)->init(4,9)->init(5,13)->init(6,12)->init(7,5)->init(8,6)->init(9,7)->init(10,8));
HXLINE(  51)				_g->set(10,_g11);
            			}
HXDLIN(  51)			return _g;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_51_boot)
HXDLIN(  51)		keysShit = ( ( ::haxe::ds::IntMap)( ::Dynamic(new _hx_Closure_0())()) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_79_boot)
HXDLIN(  79)		ammo = ::Array_obj< int >::fromData( _hx_array_data_33e34412_32,11);
            	}
{
            	HX_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_83_boot)
HXDLIN(  83)		pixelScales = ::Array_obj< Float >::fromData( _hx_array_data_33e34412_34,11);
            	}
{
            	HX_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_111_boot)
HXDLIN( 111)		swagWidth = ((Float)112.);
            	}
{
            	HX_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_112_boot)
HXDLIN( 112)		PURP_NOTE = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_113_boot)
HXDLIN( 113)		GREEN_NOTE = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_114_boot)
HXDLIN( 114)		BLUE_NOTE = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_115_boot)
HXDLIN( 115)		RED_NOTE = 3;
            	}
}

