// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Alphabet
#include <Alphabet.h>
#endif
#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_ClientPrefs
#include <ClientPrefs.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_FreeplayState
#include <FreeplayState.h>
#endif
#ifndef INCLUDED_HealthIcon
#include <HealthIcon.h>
#endif
#ifndef INCLUDED_Highscore
#include <Highscore.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PauseSubState
#include <PauseSubState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Song
#include <Song.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StoryMenuState
#include <StoryMenuState.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBar
#include <flixel/ui/FlxBar.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_17d383cbce329512_18_new,"PauseSubState","new",0x00d575d9,"PauseSubState.new","PauseSubState.hx",18,0x953dc7b7)
static const ::String _hx_array_data_08e59567_2[] = {
	HX_("Resume",cd,dd,18,3d),HX_("Restart Song",06,b6,fe,13),HX_("Change Difficulty",eb,7e,37,a6),HX_("Exit to menu",82,87,9a,a9),
};
HX_LOCAL_STACK_FRAME(_hx_pos_17d383cbce329512_220_update,"PauseSubState","update",0x6d53d230,"PauseSubState.update","PauseSubState.hx",220,0x953dc7b7)
HX_LOCAL_STACK_FRAME(_hx_pos_17d383cbce329512_364_destroy,"PauseSubState","destroy",0xc2ba82f3,"PauseSubState.destroy","PauseSubState.hx",364,0x953dc7b7)
HX_LOCAL_STACK_FRAME(_hx_pos_17d383cbce329512_371_changeSelection,"PauseSubState","changeSelection",0x8f960fb5,"PauseSubState.changeSelection","PauseSubState.hx",371,0x953dc7b7)
HX_LOCAL_STACK_FRAME(_hx_pos_17d383cbce329512_405_regenMenu,"PauseSubState","regenMenu",0xfb4cc935,"PauseSubState.regenMenu","PauseSubState.hx",405,0x953dc7b7)
HX_LOCAL_STACK_FRAME(_hx_pos_17d383cbce329512_434_updateSkipTextStuff,"PauseSubState","updateSkipTextStuff",0xfcc58838,"PauseSubState.updateSkipTextStuff","PauseSubState.hx",434,0x953dc7b7)
HX_LOCAL_STACK_FRAME(_hx_pos_17d383cbce329512_444_updateSkipTimeText,"PauseSubState","updateSkipTimeText",0xb61bdf49,"PauseSubState.updateSkipTimeText","PauseSubState.hx",444,0x953dc7b7)
HX_LOCAL_STACK_FRAME(_hx_pos_17d383cbce329512_347_restartSong,"PauseSubState","restartSong",0x7c01f1bd,"PauseSubState.restartSong","PauseSubState.hx",347,0x953dc7b7)
HX_LOCAL_STACK_FRAME(_hx_pos_17d383cbce329512_38_boot,"PauseSubState","boot",0xb20aa899,"PauseSubState.boot","PauseSubState.hx",38,0x953dc7b7)

void PauseSubState_obj::__construct(Float x,Float y){
            	HX_GC_STACKFRAME(&_hx_pos_17d383cbce329512_18_new)
HXLINE( 218)		this->holdTime = ((Float)0);
HXLINE(  35)		this->curTime = ::Math_obj::max(( (Float)(0) ),::Conductor_obj::songPosition);
HXLINE(  25)		this->curSelected = 0;
HXLINE(  24)		this->difficultyChoices = ::Array_obj< ::String >::__new(0);
HXLINE(  23)		this->menuItemsOG = ::Array_obj< ::String >::fromData( _hx_array_data_08e59567_2,4);
HXLINE(  22)		this->menuItems = ::Array_obj< ::String >::__new(0);
HXLINE(  42)		super::__construct();
HXLINE(  43)		if ((::CoolUtil_obj::difficulties->length < 2)) {
HXLINE(  43)			this->menuItemsOG->remove(HX_("Change Difficulty",eb,7e,37,a6));
            		}
HXLINE(  45)		if (::PlayState_obj::chartingMode) {
HXLINE(  47)			this->menuItemsOG->insert(2,HX_("Leave Charting Mode",36,c5,86,71));
HXLINE(  49)			int num = 0;
HXLINE(  50)			if (!(::PlayState_obj::instance->startingSong)) {
HXLINE(  52)				num = 1;
HXLINE(  53)				this->menuItemsOG->insert(3,HX_("Skip Time",4e,65,49,c7));
            			}
HXLINE(  55)			this->menuItemsOG->insert((3 + num),HX_("End Song",7a,be,85,e8));
HXLINE(  56)			this->menuItemsOG->insert((4 + num),HX_("Toggle Practice Mode",7c,8b,b4,6b));
HXLINE(  57)			this->menuItemsOG->insert((5 + num),HX_("Toggle Botplay",ef,6e,ca,1a));
            		}
HXLINE(  59)		this->menuItems = this->menuItemsOG;
HXLINE(  61)		{
HXLINE(  61)			int _g = 0;
HXDLIN(  61)			int _g1 = ::CoolUtil_obj::difficulties->length;
HXDLIN(  61)			while((_g < _g1)){
HXLINE(  61)				_g = (_g + 1);
HXDLIN(  61)				int i = (_g - 1);
HXLINE(  62)				::String diff = (HX_("",00,00,00,00) + ::CoolUtil_obj::difficulties->__get(i));
HXLINE(  63)				this->difficultyChoices->push(diff);
            			}
            		}
HXLINE(  65)		this->difficultyChoices->push(HX_("BACK",27,a2,d1,2b));
HXLINE(  68)		this->pauseMusic =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXLINE(  69)		if (::hx::IsNotNull( ::PauseSubState_obj::songName )) {
HXLINE(  70)			 ::flixel::_hx_system::FlxSound _hx_tmp = this->pauseMusic;
HXDLIN(  70)			::String library = null();
HXDLIN(  70)			 ::openfl::media::Sound file = ::Paths_obj::returnSound(HX_("music",a5,d0,5a,10),::PauseSubState_obj::songName,library);
HXDLIN(  70)			_hx_tmp->loadEmbedded(file,true,true,null());
            		}
            		else {
HXLINE(  71)			if ((::PauseSubState_obj::songName != HX_("None",d8,3e,e3,33))) {
HXLINE(  72)				 ::flixel::_hx_system::FlxSound _hx_tmp = this->pauseMusic;
HXDLIN(  72)				::String library = null();
HXDLIN(  72)				 ::openfl::media::Sound file = ::Paths_obj::returnSound(HX_("music",a5,d0,5a,10),::StringTools_obj::replace(::ClientPrefs_obj::pauseMusic.toLowerCase(),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)),library);
HXDLIN(  72)				_hx_tmp->loadEmbedded(file,true,true,null());
            			}
            		}
HXLINE(  74)		this->pauseMusic->set_volume(( (Float)(0) ));
HXLINE(  75)		 ::flixel::_hx_system::FlxSound _hx_tmp = this->pauseMusic;
HXDLIN(  75)		 ::flixel::math::FlxRandom _hx_tmp1 = ::flixel::FlxG_obj::random;
HXDLIN(  75)		_hx_tmp->play(false,_hx_tmp1->_hx_int(0,::Std_obj::_hx_int((this->pauseMusic->_length / ( (Float)(2) ))),null()),null());
HXLINE(  77)		::flixel::FlxG_obj::sound->list->add(this->pauseMusic).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXLINE(  79)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height,-16777216,null(),null());
HXLINE(  80)		bg->set_alpha(( (Float)(0) ));
HXLINE(  81)		bg->scrollFactor->set(null(),null());
HXLINE(  82)		this->add(bg);
HXLINE(  84)		if (!(::ClientPrefs_obj::lowQuality)) {
HXLINE(  86)			 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(  86)			::String library = null();
HXDLIN(  86)			 ::flixel::graphics::FlxGraphic returnAsset = ::Paths_obj::returnGraphic(HX_("pausemenubg",9a,f4,e9,c4),library);
HXDLIN(  86)			this->pausebg = _hx_tmp->loadGraphic(returnAsset,null(),null(),null(),null(),null());
HXLINE(  87)			this->pausebg->set_color(-14803426);
HXLINE(  88)			this->pausebg->scrollFactor->set(null(),null());
HXLINE(  89)			this->pausebg->updateHitbox();
HXLINE(  90)			this->pausebg->screenCenter(null());
HXLINE(  91)			this->pausebg->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE(  92)			this->add(this->pausebg);
HXLINE(  93)			{
HXLINE(  93)				 ::flixel::FlxSprite _g = this->pausebg;
HXDLIN(  93)				_g->set_x((_g->x + 200));
            			}
HXLINE(  94)			{
HXLINE(  94)				 ::flixel::FlxSprite _g1 = this->pausebg;
HXDLIN(  94)				_g1->set_y((_g1->y - ( (Float)(200) )));
            			}
HXLINE(  95)			this->pausebg->set_alpha(( (Float)(0) ));
HXLINE(  96)			::flixel::tweens::FlxTween_obj::tween(this->pausebg, ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("x",78,00,00,00),0)
            				->setFixed(1,HX_("y",79,00,00,00),0)
            				->setFixed(2,HX_("alpha",5e,a7,96,21),1)),1, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
HXLINE( 102)			 ::flixel::FlxSprite _hx_tmp1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 102)			::String library1 = null();
HXDLIN( 102)			 ::flixel::graphics::FlxGraphic returnAsset1 = ::Paths_obj::returnGraphic(HX_("iconbackground",a7,ec,37,da),library1);
HXDLIN( 102)			this->pausebg1 = _hx_tmp1->loadGraphic(returnAsset1,null(),null(),null(),null(),null());
HXLINE( 103)			this->pausebg1->set_color(-15461356);
HXLINE( 104)			this->pausebg1->scrollFactor->set(null(),null());
HXLINE( 105)			this->pausebg1->updateHitbox();
HXLINE( 106)			this->pausebg1->screenCenter(null());
HXLINE( 107)			this->pausebg1->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE( 108)			this->add(this->pausebg1);
HXLINE( 109)			{
HXLINE( 109)				 ::flixel::FlxSprite _g2 = this->pausebg1;
HXDLIN( 109)				_g2->set_x((_g2->x - ( (Float)(150) )));
            			}
HXLINE( 110)			{
HXLINE( 110)				 ::flixel::FlxSprite _g3 = this->pausebg1;
HXDLIN( 110)				_g3->set_y((_g3->y + 150));
            			}
HXLINE( 111)			this->pausebg1->set_alpha(( (Float)(0) ));
HXLINE( 112)			::flixel::tweens::FlxTween_obj::tween(this->pausebg1, ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("x",78,00,00,00),0)
            				->setFixed(1,HX_("y",79,00,00,00),0)
            				->setFixed(2,HX_("alpha",5e,a7,96,21),1)),((Float)0.9), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
HXLINE( 118)			 ::flixel::FlxSprite _hx_tmp2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 118)			::String library2 = null();
HXDLIN( 118)			 ::flixel::graphics::FlxGraphic returnAsset2 = ::Paths_obj::returnGraphic(HX_("iconbackground",a7,ec,37,da),library2);
HXDLIN( 118)			this->iconBG = _hx_tmp2->loadGraphic(returnAsset2,null(),null(),null(),null(),null());
HXLINE( 119)			this->iconBG->set_flipX(true);
HXLINE( 120)			 ::flixel::FlxSprite _hx_tmp3 = this->iconBG;
HXDLIN( 120)			int Red = ::PlayState_obj::instance->dad->healthColorArray->__get(0);
HXDLIN( 120)			int Green = ::PlayState_obj::instance->dad->healthColorArray->__get(1);
HXDLIN( 120)			int Blue = ::PlayState_obj::instance->dad->healthColorArray->__get(2);
HXDLIN( 120)			int Alpha = 255;
HXDLIN( 120)			int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 120)			{
HXLINE( 120)				color = (color & -16711681);
HXDLIN( 120)				int color1;
HXDLIN( 120)				if ((Red > 255)) {
HXLINE( 120)					color1 = 255;
            				}
            				else {
HXLINE( 120)					if ((Red < 0)) {
HXLINE( 120)						color1 = 0;
            					}
            					else {
HXLINE( 120)						color1 = Red;
            					}
            				}
HXDLIN( 120)				color = (color | (color1 << 16));
            			}
HXDLIN( 120)			{
HXLINE( 120)				color = (color & -65281);
HXDLIN( 120)				int color2;
HXDLIN( 120)				if ((Green > 255)) {
HXLINE( 120)					color2 = 255;
            				}
            				else {
HXLINE( 120)					if ((Green < 0)) {
HXLINE( 120)						color2 = 0;
            					}
            					else {
HXLINE( 120)						color2 = Green;
            					}
            				}
HXDLIN( 120)				color = (color | (color2 << 8));
            			}
HXDLIN( 120)			{
HXLINE( 120)				color = (color & -256);
HXDLIN( 120)				int color3;
HXDLIN( 120)				if ((Blue > 255)) {
HXLINE( 120)					color3 = 255;
            				}
            				else {
HXLINE( 120)					if ((Blue < 0)) {
HXLINE( 120)						color3 = 0;
            					}
            					else {
HXLINE( 120)						color3 = Blue;
            					}
            				}
HXDLIN( 120)				color = (color | color3);
            			}
HXDLIN( 120)			{
HXLINE( 120)				color = (color & 16777215);
HXDLIN( 120)				int color4;
HXDLIN( 120)				if ((Alpha > 255)) {
HXLINE( 120)					color4 = 255;
            				}
            				else {
HXLINE( 120)					if ((Alpha < 0)) {
HXLINE( 120)						color4 = 0;
            					}
            					else {
HXLINE( 120)						color4 = Alpha;
            					}
            				}
HXDLIN( 120)				color = (color | (color4 << 24));
            			}
HXDLIN( 120)			_hx_tmp3->set_color(color);
HXLINE( 121)			this->iconBG->scrollFactor->set(null(),null());
HXLINE( 122)			this->iconBG->updateHitbox();
HXLINE( 123)			this->iconBG->screenCenter(null());
HXLINE( 124)			this->iconBG->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE( 125)			this->add(this->iconBG);
HXLINE( 126)			{
HXLINE( 126)				 ::flixel::FlxSprite _g4 = this->iconBG;
HXDLIN( 126)				_g4->set_x((_g4->x + 100));
            			}
HXLINE( 127)			{
HXLINE( 127)				 ::flixel::FlxSprite _g5 = this->iconBG;
HXDLIN( 127)				_g5->set_y((_g5->y + 100));
            			}
HXLINE( 128)			this->iconBG->set_alpha(( (Float)(0) ));
HXLINE( 129)			::flixel::tweens::FlxTween_obj::tween(this->iconBG, ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("x",78,00,00,00),0)
            				->setFixed(1,HX_("y",79,00,00,00),0)
            				->setFixed(2,HX_("alpha",5e,a7,96,21),1)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
HXLINE( 135)			this->icon =  ::HealthIcon_obj::__alloc( HX_CTX ,::PlayState_obj::instance->dad->healthIcon,null());
HXLINE( 136)			if ((::PlayState_obj::instance->healthBar->get_percent() > 80)) {
HXLINE( 137)				this->icon->animation->_curAnim->set_curFrame(1);
            			}
            			else {
HXLINE( 138)				if ((::PlayState_obj::instance->healthBar->get_percent() < 20)) {
HXLINE( 139)					this->icon->animation->_curAnim->set_curFrame(2);
            				}
            				else {
HXLINE( 141)					this->icon->animation->_curAnim->set_curFrame(0);
            				}
            			}
HXLINE( 142)			 ::HealthIcon _hx_tmp4 = this->icon;
HXDLIN( 142)			_hx_tmp4->setGraphicSize(::Std_obj::_hx_int((this->icon->get_width() * ((Float)1.7))),null());
HXLINE( 143)			this->icon->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE( 144)			this->icon->set_x(( (Float)((::flixel::FlxG_obj::width - 230)) ));
HXLINE( 145)			this->icon->set_y(( (Float)((::flixel::FlxG_obj::height - 180)) ));
HXLINE( 146)			this->icon->set_flipX(true);
HXLINE( 147)			this->icon->scrollFactor->set(null(),null());
HXLINE( 148)			this->icon->updateHitbox();
HXLINE( 149)			this->add(this->icon);
HXLINE( 150)			{
HXLINE( 150)				 ::HealthIcon _g6 = this->icon;
HXDLIN( 150)				_g6->set_x((_g6->x + 150));
            			}
HXLINE( 151)			{
HXLINE( 151)				 ::HealthIcon _g7 = this->icon;
HXDLIN( 151)				_g7->set_y((_g7->y + 150));
            			}
HXLINE( 152)			this->icon->set_alpha(( (Float)(0) ));
HXLINE( 153)			::flixel::tweens::FlxTween_obj::tween(this->icon, ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("x",78,00,00,00),(this->icon->x - ( (Float)(150) )))
            				->setFixed(1,HX_("y",79,00,00,00),(this->icon->y - ( (Float)(150) )))
            				->setFixed(2,HX_("alpha",5e,a7,96,21),1)),((Float)0.8), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
            		}
HXLINE( 160)		 ::flixel::text::FlxText levelInfo =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,20,15,0,HX_("",00,00,00,00),32,null());
HXLINE( 161)		{
HXLINE( 161)			 ::flixel::text::FlxText _g2 = levelInfo;
HXDLIN( 161)			_g2->set_text(( (::String)((_g2->text + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic))) ));
            		}
HXLINE( 162)		levelInfo->scrollFactor->set(null(),null());
HXLINE( 163)		::String file = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82)));
HXDLIN( 163)		::String _hx_tmp2;
HXDLIN( 163)		if (::sys::FileSystem_obj::exists(file)) {
HXLINE( 163)			_hx_tmp2 = file;
            		}
            		else {
HXLINE( 163)			_hx_tmp2 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82));
            		}
HXDLIN( 163)		levelInfo->setFormat(_hx_tmp2,32,null(),null(),null(),null(),null());
HXLINE( 164)		levelInfo->updateHitbox();
HXLINE( 165)		this->add(levelInfo);
HXLINE( 167)		 ::flixel::text::FlxText levelDifficulty =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,20,47,0,HX_("",00,00,00,00),32,null());
HXLINE( 168)		{
HXLINE( 168)			 ::flixel::text::FlxText _g3 = levelDifficulty;
HXDLIN( 168)			::String _g4 = _g3->text;
HXDLIN( 168)			_g3->set_text((_g4 + ::CoolUtil_obj::difficultyString()));
            		}
HXLINE( 169)		levelDifficulty->scrollFactor->set(null(),null());
HXLINE( 170)		::String file1 = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82)));
HXDLIN( 170)		::String _hx_tmp3;
HXDLIN( 170)		if (::sys::FileSystem_obj::exists(file1)) {
HXLINE( 170)			_hx_tmp3 = file1;
            		}
            		else {
HXLINE( 170)			_hx_tmp3 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82));
            		}
HXDLIN( 170)		levelDifficulty->setFormat(_hx_tmp3,32,null(),null(),null(),null(),null());
HXLINE( 171)		levelDifficulty->updateHitbox();
HXLINE( 172)		this->add(levelDifficulty);
HXLINE( 174)		 ::flixel::text::FlxText blueballedTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,20,79,0,HX_("",00,00,00,00),32,null());
HXLINE( 175)		blueballedTxt->set_text((HX_("Blueballed: ",fe,a6,48,b4) + ::PlayState_obj::deathCounter));
HXLINE( 176)		blueballedTxt->scrollFactor->set(null(),null());
HXLINE( 177)		::String file2 = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82)));
HXDLIN( 177)		::String _hx_tmp4;
HXDLIN( 177)		if (::sys::FileSystem_obj::exists(file2)) {
HXLINE( 177)			_hx_tmp4 = file2;
            		}
            		else {
HXLINE( 177)			_hx_tmp4 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82));
            		}
HXDLIN( 177)		blueballedTxt->setFormat(_hx_tmp4,32,null(),null(),null(),null(),null());
HXLINE( 178)		blueballedTxt->updateHitbox();
HXLINE( 179)		this->add(blueballedTxt);
HXLINE( 181)		this->practiceText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,20,116,0,HX_("PRACTICE MODE",e8,14,ba,86),32,null());
HXLINE( 182)		this->practiceText->scrollFactor->set(null(),null());
HXLINE( 183)		 ::flixel::text::FlxText _hx_tmp5 = this->practiceText;
HXDLIN( 183)		::String file3 = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82)));
HXDLIN( 183)		::String _hx_tmp6;
HXDLIN( 183)		if (::sys::FileSystem_obj::exists(file3)) {
HXLINE( 183)			_hx_tmp6 = file3;
            		}
            		else {
HXLINE( 183)			_hx_tmp6 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82));
            		}
HXDLIN( 183)		_hx_tmp5->setFormat(_hx_tmp6,32,null(),null(),null(),null(),null());
HXLINE( 184)		 ::flixel::text::FlxText _hx_tmp7 = this->practiceText;
HXDLIN( 184)		int _hx_tmp8 = ::flixel::FlxG_obj::width;
HXDLIN( 184)		_hx_tmp7->set_x((( (Float)(_hx_tmp8) ) - (this->practiceText->get_width() + 20)));
HXLINE( 185)		this->practiceText->updateHitbox();
HXLINE( 186)		this->practiceText->set_visible(::PlayState_obj::instance->practiceMode);
HXLINE( 187)		this->add(this->practiceText);
HXLINE( 189)		 ::flixel::text::FlxText chartingText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,20,116,0,HX_("CHARTING MODE",3f,46,f9,44),32,null());
HXLINE( 190)		chartingText->scrollFactor->set(null(),null());
HXLINE( 191)		::String file4 = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82)));
HXDLIN( 191)		::String _hx_tmp9;
HXDLIN( 191)		if (::sys::FileSystem_obj::exists(file4)) {
HXLINE( 191)			_hx_tmp9 = file4;
            		}
            		else {
HXLINE( 191)			_hx_tmp9 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82));
            		}
HXDLIN( 191)		chartingText->setFormat(_hx_tmp9,32,null(),null(),null(),null(),null());
HXLINE( 192)		int _hx_tmp10 = ::flixel::FlxG_obj::width;
HXDLIN( 192)		chartingText->set_x((( (Float)(_hx_tmp10) ) - (chartingText->get_width() + 20)));
HXLINE( 193)		int _hx_tmp11 = ::flixel::FlxG_obj::height;
HXDLIN( 193)		chartingText->set_y((( (Float)(_hx_tmp11) ) - (chartingText->get_height() + 20)));
HXLINE( 194)		chartingText->updateHitbox();
HXLINE( 195)		chartingText->set_visible(::PlayState_obj::chartingMode);
HXLINE( 196)		this->add(chartingText);
HXLINE( 198)		blueballedTxt->set_alpha(( (Float)(0) ));
HXLINE( 199)		levelDifficulty->set_alpha(( (Float)(0) ));
HXLINE( 200)		levelInfo->set_alpha(( (Float)(0) ));
HXLINE( 202)		int _hx_tmp12 = ::flixel::FlxG_obj::width;
HXDLIN( 202)		levelInfo->set_x((( (Float)(_hx_tmp12) ) - (levelInfo->get_width() + 20)));
HXLINE( 203)		int _hx_tmp13 = ::flixel::FlxG_obj::width;
HXDLIN( 203)		levelDifficulty->set_x((( (Float)(_hx_tmp13) ) - (levelDifficulty->get_width() + 20)));
HXLINE( 204)		int _hx_tmp14 = ::flixel::FlxG_obj::width;
HXDLIN( 204)		blueballedTxt->set_x((( (Float)(_hx_tmp14) ) - (blueballedTxt->get_width() + 20)));
HXLINE( 206)		::flixel::tweens::FlxTween_obj::tween(bg, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),((Float)0.6))),((Float)0.4), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 207)		::flixel::tweens::FlxTween_obj::tween(levelInfo, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("y",79,00,00,00),20)
            			->setFixed(1,HX_("alpha",5e,a7,96,21),1)),((Float)0.4), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.3))
            			->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 208)		::flixel::tweens::FlxTween_obj::tween(levelDifficulty, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("y",79,00,00,00),(levelDifficulty->y + 5))
            			->setFixed(1,HX_("alpha",5e,a7,96,21),1)),((Float)0.4), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.5))
            			->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 209)		::flixel::tweens::FlxTween_obj::tween(blueballedTxt, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("y",79,00,00,00),(blueballedTxt->y + 5))
            			->setFixed(1,HX_("alpha",5e,a7,96,21),1)),((Float)0.4), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.7))
            			->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 211)		this->grpMenuShit =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 212)		this->add(this->grpMenuShit);
HXLINE( 214)		this->regenMenu();
HXLINE( 215)		this->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,::flixel::FlxG_obj::cameras->list->__get((::flixel::FlxG_obj::cameras->list->length - 1)).StaticCast<  ::flixel::FlxCamera >()));
            	}

Dynamic PauseSubState_obj::__CreateEmpty() { return new PauseSubState_obj; }

void *PauseSubState_obj::_hx_vtable = 0;

Dynamic PauseSubState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PauseSubState_obj > _hx_result = new PauseSubState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool PauseSubState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x5661ffbf) {
			if (inClassId<=(int)0x519cdafb) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x519cdafb;
			} else {
				return inClassId==(int)0x5661ffbf;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		if (inClassId<=(int)0x7ccf8994) {
			return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
		} else {
			return inClassId==(int)0x7fce3ab0;
		}
	}
}

void PauseSubState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_17d383cbce329512_220_update)
HXLINE( 221)		if ((this->pauseMusic->_volume < ((Float)0.5))) {
HXLINE( 222)			 ::flixel::_hx_system::FlxSound _g = this->pauseMusic;
HXDLIN( 222)			_g->set_volume((_g->_volume + (((Float)0.01) * elapsed)));
            		}
HXLINE( 224)		this->super::update(elapsed);
HXLINE( 225)		this->updateSkipTextStuff();
HXLINE( 227)		bool upP = ::PlayerSettings_obj::player1->controls->_ui_upP->check();
HXLINE( 228)		bool downP = ::PlayerSettings_obj::player1->controls->_ui_downP->check();
HXLINE( 229)		bool accepted = ::PlayerSettings_obj::player1->controls->_accept->check();
HXLINE( 231)		if (upP) {
HXLINE( 233)			this->changeSelection(-1);
            		}
HXLINE( 235)		if (downP) {
HXLINE( 237)			this->changeSelection(1);
            		}
HXLINE( 240)		::String daSelected = this->menuItems->__get(this->curSelected);
HXLINE( 241)		if ((daSelected == HX_("Skip Time",4e,65,49,c7))) {
HXLINE( 244)			if (::PlayerSettings_obj::player1->controls->_ui_leftP->check()) {
HXLINE( 246)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 246)				_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),((Float)0.4),null(),null(),null(),null());
HXLINE( 247)				 ::PauseSubState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 247)				_hx_tmp1->curTime = (_hx_tmp1->curTime - ( (Float)(1000) ));
HXLINE( 248)				this->holdTime = ( (Float)(0) );
            			}
HXLINE( 250)			if (::PlayerSettings_obj::player1->controls->_ui_rightP->check()) {
HXLINE( 252)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 252)				_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),((Float)0.4),null(),null(),null(),null());
HXLINE( 253)				 ::PauseSubState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 253)				_hx_tmp1->curTime = (_hx_tmp1->curTime + 1000);
HXLINE( 254)				this->holdTime = ( (Float)(0) );
            			}
HXLINE( 257)			bool _hx_tmp;
HXDLIN( 257)			if (!(::PlayerSettings_obj::player1->controls->_ui_left->check())) {
HXLINE( 257)				_hx_tmp = ::PlayerSettings_obj::player1->controls->_ui_right->check();
            			}
            			else {
HXLINE( 257)				_hx_tmp = true;
            			}
HXDLIN( 257)			if (_hx_tmp) {
HXLINE( 259)				 ::PauseSubState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 259)				_hx_tmp->holdTime = (_hx_tmp->holdTime + elapsed);
HXLINE( 260)				if ((this->holdTime > ((Float)0.5))) {
HXLINE( 262)					 ::PauseSubState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 262)					Float _hx_tmp1 = _hx_tmp->curTime;
HXDLIN( 262)					int _hx_tmp2;
HXDLIN( 262)					if (::PlayerSettings_obj::player1->controls->_ui_left->check()) {
HXLINE( 262)						_hx_tmp2 = -1;
            					}
            					else {
HXLINE( 262)						_hx_tmp2 = 1;
            					}
HXDLIN( 262)					_hx_tmp->curTime = (_hx_tmp1 + ((( (Float)(45000) ) * elapsed) * ( (Float)(_hx_tmp2) )));
            				}
HXLINE( 265)				if ((this->curTime >= ::flixel::FlxG_obj::sound->music->_length)) {
HXLINE( 265)					 ::PauseSubState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 265)					_hx_tmp->curTime = (_hx_tmp->curTime - ::flixel::FlxG_obj::sound->music->_length);
            				}
            				else {
HXLINE( 266)					if ((this->curTime < 0)) {
HXLINE( 266)						 ::PauseSubState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 266)						_hx_tmp->curTime = (_hx_tmp->curTime + ::flixel::FlxG_obj::sound->music->_length);
            					}
            				}
HXLINE( 267)				this->updateSkipTimeText();
            			}
            		}
HXLINE( 271)		if (accepted) {
HXLINE( 273)			if (::hx::IsEq( this->menuItems,this->difficultyChoices )) {
HXLINE( 275)				bool _hx_tmp;
HXDLIN( 275)				if (((this->menuItems->length - 1) != this->curSelected)) {
HXLINE( 275)					_hx_tmp = this->difficultyChoices->contains(daSelected);
            				}
            				else {
HXLINE( 275)					_hx_tmp = false;
            				}
HXDLIN( 275)				if (_hx_tmp) {
HXLINE( 276)					::String name = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXLINE( 277)					::String poop = ::Highscore_obj::formatSong(name,this->curSelected);
HXLINE( 278)					::PlayState_obj::SONG = ::Song_obj::loadFromJson(poop,name);
HXLINE( 279)					::PlayState_obj::storyDifficulty = this->curSelected;
HXLINE( 280)					::MusicBeatState_obj::resetState();
HXLINE( 281)					::flixel::FlxG_obj::sound->music->set_volume(( (Float)(0) ));
HXLINE( 282)					::PlayState_obj::changedDifficulty = true;
HXLINE( 283)					::PlayState_obj::chartingMode = false;
HXLINE( 284)					return;
            				}
HXLINE( 287)				this->menuItems = this->menuItemsOG;
HXLINE( 288)				this->regenMenu();
            			}
HXLINE( 291)			::String _hx_switch_0 = daSelected;
            			if (  (_hx_switch_0==HX_("Change Difficulty",eb,7e,37,a6)) ){
HXLINE( 296)				this->menuItems = this->difficultyChoices;
HXLINE( 297)				this->regenMenu();
HXLINE( 295)				goto _hx_goto_3;
            			}
            			if (  (_hx_switch_0==HX_("End Song",7a,be,85,e8)) ){
HXLINE( 323)				this->close();
HXLINE( 324)				::PlayState_obj::instance->finishSong(true);
HXLINE( 322)				goto _hx_goto_3;
            			}
            			if (  (_hx_switch_0==HX_("Exit to menu",82,87,9a,a9)) ){
HXLINE( 332)				::PlayState_obj::deathCounter = 0;
HXLINE( 333)				::PlayState_obj::seenCutscene = false;
HXLINE( 334)				if (::PlayState_obj::isStoryMode) {
HXLINE( 335)					::MusicBeatState_obj::switchState( ::StoryMenuState_obj::__alloc( HX_CTX ,null(),null()));
            				}
            				else {
HXLINE( 337)					::MusicBeatState_obj::switchState( ::FreeplayState_obj::__alloc( HX_CTX ,null(),null()));
            				}
HXLINE( 339)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 339)				::String library = null();
HXDLIN( 339)				 ::openfl::media::Sound file = ::Paths_obj::returnSound(HX_("music",a5,d0,5a,10),HX_("freakyMenu",15,c9,93,86),library);
HXDLIN( 339)				_hx_tmp->playMusic(file,null(),null(),null());
HXLINE( 340)				::PlayState_obj::changedDifficulty = false;
HXLINE( 341)				::PlayState_obj::chartingMode = false;
HXLINE( 331)				goto _hx_goto_3;
            			}
            			if (  (_hx_switch_0==HX_("Leave Charting Mode",36,c5,86,71)) ){
HXLINE( 305)				::PauseSubState_obj::restartSong(null());
HXLINE( 306)				::PlayState_obj::chartingMode = false;
HXLINE( 304)				goto _hx_goto_3;
            			}
            			if (  (_hx_switch_0==HX_("Restart Song",06,b6,fe,13)) ){
HXLINE( 303)				::PauseSubState_obj::restartSong(null());
HXDLIN( 303)				goto _hx_goto_3;
            			}
            			if (  (_hx_switch_0==HX_("Resume",cd,dd,18,3d)) ){
HXLINE( 294)				this->close();
HXDLIN( 294)				goto _hx_goto_3;
            			}
            			if (  (_hx_switch_0==HX_("Skip Time",4e,65,49,c7)) ){
HXLINE( 308)				if ((this->curTime < ::Conductor_obj::songPosition)) {
HXLINE( 310)					::PlayState_obj::startOnTime = this->curTime;
HXLINE( 311)					::PauseSubState_obj::restartSong(true);
            				}
            				else {
HXLINE( 315)					if ((this->curTime != ::Conductor_obj::songPosition)) {
HXLINE( 317)						::PlayState_obj::instance->clearNotesBefore(this->curTime);
HXLINE( 318)						::PlayState_obj::instance->setSongTime(this->curTime);
            					}
HXLINE( 320)					this->close();
            				}
HXLINE( 308)				goto _hx_goto_3;
            			}
            			if (  (_hx_switch_0==HX_("Toggle Botplay",ef,6e,ca,1a)) ){
HXLINE( 326)				::PlayState_obj::instance->cpuControlled = !(::PlayState_obj::instance->cpuControlled);
HXLINE( 327)				::PlayState_obj::changedDifficulty = true;
HXLINE( 328)				::PlayState_obj::instance->botplayTxt->set_visible(::PlayState_obj::instance->cpuControlled);
HXLINE( 329)				::PlayState_obj::instance->botplayTxt->set_alpha(( (Float)(1) ));
HXLINE( 330)				::PlayState_obj::instance->botplaySine = ( (Float)(0) );
HXLINE( 325)				goto _hx_goto_3;
            			}
            			if (  (_hx_switch_0==HX_("Toggle Practice Mode",7c,8b,b4,6b)) ){
HXLINE( 299)				::PlayState_obj::instance->practiceMode = !(::PlayState_obj::instance->practiceMode);
HXLINE( 300)				::PlayState_obj::changedDifficulty = true;
HXLINE( 301)				this->practiceText->set_visible(::PlayState_obj::instance->practiceMode);
HXLINE( 298)				goto _hx_goto_3;
            			}
            			_hx_goto_3:;
            		}
            	}


void PauseSubState_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_17d383cbce329512_364_destroy)
HXLINE( 365)		this->pauseMusic->destroy();
HXLINE( 367)		this->super::destroy();
            	}


void PauseSubState_obj::changeSelection(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_STACKFRAME(&_hx_pos_17d383cbce329512_371_changeSelection)
HXLINE( 372)		 ::PauseSubState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 372)		_hx_tmp->curSelected = (_hx_tmp->curSelected + change);
HXLINE( 374)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN( 374)		_hx_tmp1->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),((Float)0.4),null(),null(),null(),null());
HXLINE( 376)		if ((this->curSelected < 0)) {
HXLINE( 377)			this->curSelected = (this->menuItems->length - 1);
            		}
HXLINE( 378)		if ((this->curSelected >= this->menuItems->length)) {
HXLINE( 379)			this->curSelected = 0;
            		}
HXLINE( 381)		int bullShit = 0;
HXLINE( 383)		{
HXLINE( 383)			int _g = 0;
HXDLIN( 383)			::Array< ::Dynamic> _g1 = this->grpMenuShit->members;
HXDLIN( 383)			while((_g < _g1->length)){
HXLINE( 383)				 ::Alphabet item = _g1->__get(_g).StaticCast<  ::Alphabet >();
HXDLIN( 383)				_g = (_g + 1);
HXLINE( 385)				item->targetY = ( (Float)((bullShit - this->curSelected)) );
HXLINE( 386)				bullShit = (bullShit + 1);
HXLINE( 388)				item->set_alpha(((Float)0.6));
HXLINE( 391)				if ((item->targetY == 0)) {
HXLINE( 393)					item->set_alpha(( (Float)(1) ));
HXLINE( 396)					if (::hx::IsEq( item,this->skipTimeTracker )) {
HXLINE( 398)						this->curTime = ::Math_obj::max(( (Float)(0) ),::Conductor_obj::songPosition);
HXLINE( 399)						this->updateSkipTimeText();
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PauseSubState_obj,changeSelection,(void))

void PauseSubState_obj::regenMenu(){
            	HX_GC_STACKFRAME(&_hx_pos_17d383cbce329512_405_regenMenu)
HXLINE( 406)		{
HXLINE( 406)			int _g = 0;
HXDLIN( 406)			int _g1 = this->grpMenuShit->members->get_length();
HXDLIN( 406)			while((_g < _g1)){
HXLINE( 406)				_g = (_g + 1);
HXDLIN( 406)				int i = (_g - 1);
HXLINE( 407)				this->grpMenuShit->remove(Dynamic( this->grpMenuShit->members->__get(0)).StaticCast<  ::Alphabet >(),true).StaticCast<  ::Alphabet >();
            			}
            		}
HXLINE( 410)		{
HXLINE( 410)			int _g2 = 0;
HXDLIN( 410)			int _g3 = this->menuItems->length;
HXDLIN( 410)			while((_g2 < _g3)){
HXLINE( 410)				_g2 = (_g2 + 1);
HXDLIN( 410)				int i = (_g2 - 1);
HXLINE( 411)				 ::Alphabet item =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(((70 * i) + 30)) ),this->menuItems->__get(i),true,false,null(),null());
HXLINE( 412)				item->isMenuItem = true;
HXLINE( 413)				item->targetY = ( (Float)(i) );
HXLINE( 414)				this->grpMenuShit->add(item).StaticCast<  ::Alphabet >();
HXLINE( 416)				if ((this->menuItems->__get(i) == HX_("Skip Time",4e,65,49,c7))) {
HXLINE( 418)					this->skipTimeText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,HX_("",00,00,00,00),64,null());
HXLINE( 419)					 ::flixel::text::FlxText _hx_tmp = this->skipTimeText;
HXDLIN( 419)					::String file = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82)));
HXDLIN( 419)					::String _hx_tmp1;
HXDLIN( 419)					if (::sys::FileSystem_obj::exists(file)) {
HXLINE( 419)						_hx_tmp1 = file;
            					}
            					else {
HXLINE( 419)						_hx_tmp1 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82));
            					}
HXDLIN( 419)					_hx_tmp->setFormat(_hx_tmp1,64,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 420)					this->skipTimeText->scrollFactor->set(null(),null());
HXLINE( 421)					this->skipTimeText->set_borderSize(( (Float)(2) ));
HXLINE( 422)					this->skipTimeTracker = item;
HXLINE( 423)					this->add(this->skipTimeText);
HXLINE( 425)					this->updateSkipTextStuff();
HXLINE( 426)					this->updateSkipTimeText();
            				}
            			}
            		}
HXLINE( 429)		this->curSelected = 0;
HXLINE( 430)		this->changeSelection(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PauseSubState_obj,regenMenu,(void))

void PauseSubState_obj::updateSkipTextStuff(){
            	HX_STACKFRAME(&_hx_pos_17d383cbce329512_434_updateSkipTextStuff)
HXLINE( 435)		if (::hx::IsNull( this->skipTimeText )) {
HXLINE( 435)			return;
            		}
HXLINE( 437)		 ::flixel::text::FlxText _hx_tmp = this->skipTimeText;
HXDLIN( 437)		Float _hx_tmp1 = this->skipTimeTracker->x;
HXDLIN( 437)		_hx_tmp->set_x(((_hx_tmp1 + this->skipTimeTracker->get_width()) + 60));
HXLINE( 438)		this->skipTimeText->set_y(this->skipTimeTracker->y);
HXLINE( 439)		this->skipTimeText->set_visible((this->skipTimeTracker->alpha >= 1));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PauseSubState_obj,updateSkipTextStuff,(void))

void PauseSubState_obj::updateSkipTimeText(){
            	HX_STACKFRAME(&_hx_pos_17d383cbce329512_444_updateSkipTimeText)
HXDLIN( 444)		 ::flixel::text::FlxText _hx_tmp = this->skipTimeText;
HXDLIN( 444)		::String _hx_tmp1 = (::flixel::util::FlxStringUtil_obj::formatTime(::Math_obj::max(( (Float)(0) ),( (Float)(::Math_obj::floor((this->curTime / ( (Float)(1000) )))) )),false) + HX_(" / ",31,71,18,00));
HXDLIN( 444)		_hx_tmp->set_text((_hx_tmp1 + ::flixel::util::FlxStringUtil_obj::formatTime(::Math_obj::max(( (Float)(0) ),( (Float)(::Math_obj::floor((::flixel::FlxG_obj::sound->music->_length / ( (Float)(1000) )))) )),false)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PauseSubState_obj,updateSkipTimeText,(void))

::String PauseSubState_obj::songName;

void PauseSubState_obj::restartSong(::hx::Null< bool >  __o_noTrans){
            		bool noTrans = __o_noTrans.Default(false);
            	HX_STACKFRAME(&_hx_pos_17d383cbce329512_347_restartSong)
HXLINE( 348)		::PlayState_obj::instance->paused = true;
HXLINE( 349)		::flixel::FlxG_obj::sound->music->set_volume(( (Float)(0) ));
HXLINE( 350)		::PlayState_obj::instance->vocals->set_volume(( (Float)(0) ));
HXLINE( 352)		if (noTrans) {
HXLINE( 354)			::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransOut = true;
HXLINE( 355)			{
HXLINE( 355)				 ::flixel::FlxState nextState = ( ( ::flixel::FlxState)(::Type_obj::createInstance(::Type_obj::getClass(::flixel::FlxG_obj::game->_state),::cpp::VirtualArray_obj::__new(0))) );
HXDLIN( 355)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 355)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
            		else {
HXLINE( 359)			::MusicBeatState_obj::resetState();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PauseSubState_obj,restartSong,(void))


::hx::ObjectPtr< PauseSubState_obj > PauseSubState_obj::__new(Float x,Float y) {
	::hx::ObjectPtr< PauseSubState_obj > __this = new PauseSubState_obj();
	__this->__construct(x,y);
	return __this;
}

::hx::ObjectPtr< PauseSubState_obj > PauseSubState_obj::__alloc(::hx::Ctx *_hx_ctx,Float x,Float y) {
	PauseSubState_obj *__this = (PauseSubState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PauseSubState_obj), true, "PauseSubState"));
	*(void **)__this = PauseSubState_obj::_hx_vtable;
	__this->__construct(x,y);
	return __this;
}

PauseSubState_obj::PauseSubState_obj()
{
}

void PauseSubState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PauseSubState);
	HX_MARK_MEMBER_NAME(grpMenuShit,"grpMenuShit");
	HX_MARK_MEMBER_NAME(menuItems,"menuItems");
	HX_MARK_MEMBER_NAME(menuItemsOG,"menuItemsOG");
	HX_MARK_MEMBER_NAME(difficultyChoices,"difficultyChoices");
	HX_MARK_MEMBER_NAME(curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(pausebg,"pausebg");
	HX_MARK_MEMBER_NAME(pausebg1,"pausebg1");
	HX_MARK_MEMBER_NAME(iconBG,"iconBG");
	HX_MARK_MEMBER_NAME(icon,"icon");
	HX_MARK_MEMBER_NAME(pauseMusic,"pauseMusic");
	HX_MARK_MEMBER_NAME(practiceText,"practiceText");
	HX_MARK_MEMBER_NAME(skipTimeText,"skipTimeText");
	HX_MARK_MEMBER_NAME(skipTimeTracker,"skipTimeTracker");
	HX_MARK_MEMBER_NAME(curTime,"curTime");
	HX_MARK_MEMBER_NAME(holdTime,"holdTime");
	 ::flixel::FlxSubState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PauseSubState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(grpMenuShit,"grpMenuShit");
	HX_VISIT_MEMBER_NAME(menuItems,"menuItems");
	HX_VISIT_MEMBER_NAME(menuItemsOG,"menuItemsOG");
	HX_VISIT_MEMBER_NAME(difficultyChoices,"difficultyChoices");
	HX_VISIT_MEMBER_NAME(curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(pausebg,"pausebg");
	HX_VISIT_MEMBER_NAME(pausebg1,"pausebg1");
	HX_VISIT_MEMBER_NAME(iconBG,"iconBG");
	HX_VISIT_MEMBER_NAME(icon,"icon");
	HX_VISIT_MEMBER_NAME(pauseMusic,"pauseMusic");
	HX_VISIT_MEMBER_NAME(practiceText,"practiceText");
	HX_VISIT_MEMBER_NAME(skipTimeText,"skipTimeText");
	HX_VISIT_MEMBER_NAME(skipTimeTracker,"skipTimeTracker");
	HX_VISIT_MEMBER_NAME(curTime,"curTime");
	HX_VISIT_MEMBER_NAME(holdTime,"holdTime");
	 ::flixel::FlxSubState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PauseSubState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"icon") ) { return ::hx::Val( icon ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"iconBG") ) { return ::hx::Val( iconBG ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pausebg") ) { return ::hx::Val( pausebg ); }
		if (HX_FIELD_EQ(inName,"curTime") ) { return ::hx::Val( curTime ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"pausebg1") ) { return ::hx::Val( pausebg1 ); }
		if (HX_FIELD_EQ(inName,"holdTime") ) { return ::hx::Val( holdTime ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { return ::hx::Val( menuItems ); }
		if (HX_FIELD_EQ(inName,"regenMenu") ) { return ::hx::Val( regenMenu_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pauseMusic") ) { return ::hx::Val( pauseMusic ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"grpMenuShit") ) { return ::hx::Val( grpMenuShit ); }
		if (HX_FIELD_EQ(inName,"menuItemsOG") ) { return ::hx::Val( menuItemsOG ); }
		if (HX_FIELD_EQ(inName,"curSelected") ) { return ::hx::Val( curSelected ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"practiceText") ) { return ::hx::Val( practiceText ); }
		if (HX_FIELD_EQ(inName,"skipTimeText") ) { return ::hx::Val( skipTimeText ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"skipTimeTracker") ) { return ::hx::Val( skipTimeTracker ); }
		if (HX_FIELD_EQ(inName,"changeSelection") ) { return ::hx::Val( changeSelection_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"difficultyChoices") ) { return ::hx::Val( difficultyChoices ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"updateSkipTimeText") ) { return ::hx::Val( updateSkipTimeText_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"updateSkipTextStuff") ) { return ::hx::Val( updateSkipTextStuff_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PauseSubState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"songName") ) { outValue = ( songName ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"restartSong") ) { outValue = restartSong_dyn(); return true; }
	}
	return false;
}

::hx::Val PauseSubState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"icon") ) { icon=inValue.Cast<  ::HealthIcon >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"iconBG") ) { iconBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pausebg") ) { pausebg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curTime") ) { curTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"pausebg1") ) { pausebg1=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"holdTime") ) { holdTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { menuItems=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pauseMusic") ) { pauseMusic=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"grpMenuShit") ) { grpMenuShit=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"menuItemsOG") ) { menuItemsOG=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"practiceText") ) { practiceText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skipTimeText") ) { skipTimeText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"skipTimeTracker") ) { skipTimeTracker=inValue.Cast<  ::Alphabet >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"difficultyChoices") ) { difficultyChoices=inValue.Cast< ::Array< ::String > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool PauseSubState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"songName") ) { songName=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void PauseSubState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("grpMenuShit",04,32,b8,f0));
	outFields->push(HX_("menuItems",e1,15,e5,5c));
	outFields->push(HX_("menuItemsOG",39,55,bf,30));
	outFields->push(HX_("difficultyChoices",f7,9c,00,1a));
	outFields->push(HX_("curSelected",fb,eb,ab,32));
	outFields->push(HX_("pausebg",3b,56,34,a4));
	outFields->push(HX_("pausebg1",96,1d,97,09));
	outFields->push(HX_("iconBG",7e,b1,d6,45));
	outFields->push(HX_("icon",79,e7,b2,45));
	outFields->push(HX_("pauseMusic",cf,6d,d3,e5));
	outFields->push(HX_("practiceText",08,73,28,84));
	outFields->push(HX_("skipTimeText",f9,38,2b,55));
	outFields->push(HX_("skipTimeTracker",ec,2a,bf,89));
	outFields->push(HX_("curTime",ad,3d,12,b8));
	outFields->push(HX_("holdTime",ec,cc,bf,3e));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PauseSubState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PauseSubState_obj,grpMenuShit),HX_("grpMenuShit",04,32,b8,f0)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PauseSubState_obj,menuItems),HX_("menuItems",e1,15,e5,5c)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PauseSubState_obj,menuItemsOG),HX_("menuItemsOG",39,55,bf,30)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PauseSubState_obj,difficultyChoices),HX_("difficultyChoices",f7,9c,00,1a)},
	{::hx::fsInt,(int)offsetof(PauseSubState_obj,curSelected),HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PauseSubState_obj,pausebg),HX_("pausebg",3b,56,34,a4)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PauseSubState_obj,pausebg1),HX_("pausebg1",96,1d,97,09)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PauseSubState_obj,iconBG),HX_("iconBG",7e,b1,d6,45)},
	{::hx::fsObject /*  ::HealthIcon */ ,(int)offsetof(PauseSubState_obj,icon),HX_("icon",79,e7,b2,45)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(PauseSubState_obj,pauseMusic),HX_("pauseMusic",cf,6d,d3,e5)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PauseSubState_obj,practiceText),HX_("practiceText",08,73,28,84)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PauseSubState_obj,skipTimeText),HX_("skipTimeText",f9,38,2b,55)},
	{::hx::fsObject /*  ::Alphabet */ ,(int)offsetof(PauseSubState_obj,skipTimeTracker),HX_("skipTimeTracker",ec,2a,bf,89)},
	{::hx::fsFloat,(int)offsetof(PauseSubState_obj,curTime),HX_("curTime",ad,3d,12,b8)},
	{::hx::fsFloat,(int)offsetof(PauseSubState_obj,holdTime),HX_("holdTime",ec,cc,bf,3e)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo PauseSubState_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &PauseSubState_obj::songName,HX_("songName",c0,d0,d7,36)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String PauseSubState_obj_sMemberFields[] = {
	HX_("grpMenuShit",04,32,b8,f0),
	HX_("menuItems",e1,15,e5,5c),
	HX_("menuItemsOG",39,55,bf,30),
	HX_("difficultyChoices",f7,9c,00,1a),
	HX_("curSelected",fb,eb,ab,32),
	HX_("pausebg",3b,56,34,a4),
	HX_("pausebg1",96,1d,97,09),
	HX_("iconBG",7e,b1,d6,45),
	HX_("icon",79,e7,b2,45),
	HX_("pauseMusic",cf,6d,d3,e5),
	HX_("practiceText",08,73,28,84),
	HX_("skipTimeText",f9,38,2b,55),
	HX_("skipTimeTracker",ec,2a,bf,89),
	HX_("curTime",ad,3d,12,b8),
	HX_("holdTime",ec,cc,bf,3e),
	HX_("update",09,86,05,87),
	HX_("destroy",fa,2c,86,24),
	HX_("changeSelection",bc,98,b5,48),
	HX_("regenMenu",fc,42,dc,26),
	HX_("updateSkipTextStuff",bf,a0,ab,1e),
	HX_("updateSkipTimeText",a2,74,38,cd),
	::String(null()) };

static void PauseSubState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PauseSubState_obj::songName,"songName");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PauseSubState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PauseSubState_obj::songName,"songName");
};

#endif

::hx::Class PauseSubState_obj::__mClass;

static ::String PauseSubState_obj_sStaticFields[] = {
	HX_("songName",c0,d0,d7,36),
	HX_("restartSong",44,ab,b8,45),
	::String(null())
};

void PauseSubState_obj::__register()
{
	PauseSubState_obj _hx_dummy;
	PauseSubState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("PauseSubState",67,95,e5,08);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PauseSubState_obj::__GetStatic;
	__mClass->mSetStaticField = &PauseSubState_obj::__SetStatic;
	__mClass->mMarkFunc = PauseSubState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PauseSubState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PauseSubState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PauseSubState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PauseSubState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PauseSubState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PauseSubState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PauseSubState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_17d383cbce329512_38_boot)
HXDLIN(  38)		songName = HX_("",00,00,00,00);
            	}
}

